{"version":3,"file":"explore.eace4a51787eca54e0d8.js","sources":["webpack:///./public/app/core/components/ToggleButtonGroup/ToggleButtonGroup.tsx","webpack:///./public/app/core/utils/reselect.ts","webpack:///./public/app/features/explore/ElapsedTime.tsx","webpack:///./public/app/features/explore/Error.tsx","webpack:///./public/app/features/explore/ErrorBoundary.tsx","webpack:///./public/app/features/explore/Explore.tsx","webpack:///./public/app/features/explore/ExploreToolbar.tsx","webpack:///./public/app/features/explore/Graph.tsx","webpack:///./public/app/features/explore/GraphContainer.tsx","webpack:///./public/app/features/explore/Legend.tsx","webpack:///./public/app/features/explore/LogLabel.tsx","webpack:///./public/app/features/explore/LogLabelStats.tsx","webpack:///./public/app/features/explore/LogLabels.tsx","webpack:///./public/app/features/explore/LogRow.tsx","webpack:///./public/app/features/explore/Logs.tsx","webpack:///./public/app/features/explore/LogsContainer.tsx","webpack:///./public/app/features/explore/Panel.tsx","webpack:///./public/app/features/explore/QueryEditor.tsx","webpack:///./public/app/features/explore/QueryRow.tsx","webpack:///./public/app/features/explore/QueryRows.tsx","webpack:///./public/app/features/explore/QueryTransactionStatus.tsx","webpack:///./public/app/features/explore/Table.tsx","webpack:///./public/app/features/explore/TableContainer.tsx","webpack:///./public/app/features/explore/TimePicker.tsx","webpack:///./public/app/features/explore/Wrapper.tsx","webpack:///./public/app/features/explore/state/actions.ts","webpack:///./public/app/features/explore/state/selectors.ts","webpack:///./public/app/features/explore/utils/set.ts"],"sourcesContent":["import React, { FC, ReactNode, PureComponent } from 'react';\r\nimport { Tooltip } from '@grafana/ui';\r\n\r\ninterface ToggleButtonGroupProps {\r\n  label?: string;\r\n  children: JSX.Element[];\r\n  transparent?: boolean;\r\n}\r\n\r\nexport default class ToggleButtonGroup extends PureComponent<ToggleButtonGroupProps> {\r\n  render() {\r\n    const { children, label, transparent } = this.props;\r\n\r\n    return (\r\n      <div className=\"gf-form\">\r\n        {label && <label className={`gf-form-label ${transparent ? 'gf-form-label--transparent' : ''}`}>{label}</label>}\r\n        <div className={`toggle-button-group ${transparent ? 'toggle-button-group--transparent' : ''}`}>{children}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\ninterface ToggleButtonProps {\r\n  onChange?: (value) => void;\r\n  selected?: boolean;\r\n  value: any;\r\n  className?: string;\r\n  children: ReactNode;\r\n  tooltip?: string;\r\n}\r\n\r\nexport const ToggleButton: FC<ToggleButtonProps> = ({\r\n  children,\r\n  selected,\r\n  className = '',\r\n  value = null,\r\n  tooltip,\r\n  onChange,\r\n}) => {\r\n  const handleChange = event => {\r\n    event.stopPropagation();\r\n    if (onChange) {\r\n      onChange(value);\r\n    }\r\n  };\r\n\r\n  const btnClassName = `btn ${className} ${selected ? 'active' : ''}`;\r\n  const button = (\r\n    <button className={btnClassName} onClick={handleChange}>\r\n      <span>{children}</span>\r\n    </button>\r\n  );\r\n\r\n  if (tooltip) {\r\n    return (\r\n      <Tooltip content={tooltip} placement=\"bottom\">\r\n        {button}\r\n      </Tooltip>\r\n    );\r\n  } else {\r\n    return button;\r\n  }\r\n};\r\n","import { memoize } from 'lodash';\r\nimport { createSelectorCreator } from 'reselect';\r\n\r\nconst hashFn = (...args) => args.reduce((acc, val) => acc + '-' + JSON.stringify(val), '');\r\nexport const createLodashMemoizedSelector = createSelectorCreator(memoize, hashFn);\r\n","import React, { PureComponent } from 'react';\r\n\r\nconst INTERVAL = 150;\r\n\r\nexport default class ElapsedTime extends PureComponent<any, any> {\r\n  offset: number;\r\n  timer: number;\r\n\r\n  state = {\r\n    elapsed: 0,\r\n  };\r\n\r\n  start() {\r\n    this.offset = Date.now();\r\n    this.timer = window.setInterval(this.tick, INTERVAL);\r\n  }\r\n\r\n  tick = () => {\r\n    const jetzt = Date.now();\r\n    const elapsed = jetzt - this.offset;\r\n    this.setState({ elapsed });\r\n  };\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.time) {\r\n      clearInterval(this.timer);\r\n    } else if (this.props.time) {\r\n      this.start();\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.start();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timer);\r\n  }\r\n\r\n  render() {\r\n    const { elapsed } = this.state;\r\n    const { className, time } = this.props;\r\n    const value = (time || elapsed) / 1000;\r\n    return <span className={`elapsed-time ${className}`}>{value.toFixed(1)}s</span>;\r\n  }\r\n}\r\n","import React, { FC } from 'react';\r\n\r\ninterface Props {\r\n  message: any;\r\n}\r\n\r\nexport const Alert: FC<Props> = props => {\r\n  const { message } = props;\r\n  return (\r\n    <div className=\"gf-form-group section\">\r\n      <div className=\"alert-error alert\">\r\n        <div className=\"alert-icon\">\r\n          <i className=\"fa fa-exclamation-triangle\" />\r\n        </div>\r\n        <div className=\"alert-body\">\r\n          <div className=\"alert-title\">{message}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { Component } from 'react';\r\n\r\nexport default class ErrorBoundary extends Component<{}, any> {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { error: null, errorInfo: null };\r\n  }\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    // Catch errors in any components below and re-render with error message\r\n    this.setState({\r\n      error: error,\r\n      errorInfo: errorInfo,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.errorInfo) {\r\n      // Error path\r\n      return (\r\n        <div className=\"explore-container\">\r\n          <h3>An unexpected error happened.</h3>\r\n          <details style={{ whiteSpace: 'pre-wrap' }}>\r\n            {this.state.error && this.state.error.toString()}\r\n            <br />\r\n            {this.state.errorInfo.componentStack}\r\n          </details>\r\n        </div>\r\n      );\r\n    }\r\n    // Normally, just render children\r\n    return this.props.children;\r\n  }\r\n}\r\n","// Libraries\r\nimport React, { ComponentClass } from 'react';\r\nimport { hot } from 'react-hot-loader';\r\nimport { connect } from 'react-redux';\r\nimport _ from 'lodash';\r\nimport { AutoSizer } from 'react-virtualized';\r\n\r\n// Services & Utils\r\nimport store from 'app/core/store';\r\n\r\n// Components\r\nimport { Alert } from './Error';\r\nimport ErrorBoundary from './ErrorBoundary';\r\nimport GraphContainer from './GraphContainer';\r\nimport LogsContainer from './LogsContainer';\r\nimport QueryRows from './QueryRows';\r\nimport TableContainer from './TableContainer';\r\nimport TimePicker, { parseTime } from './TimePicker';\r\n\r\n// Actions\r\nimport { changeSize, changeTime, initializeExplore, modifyQueries, scanStart, setQueries } from './state/actions';\r\n\r\n// Types\r\nimport { RawTimeRange, TimeRange, DataQuery, ExploreStartPageProps, ExploreDataSourceApi } from '@grafana/ui';\r\nimport { ExploreItemState, ExploreUrlState, RangeScanner, ExploreId } from 'app/types/explore';\r\nimport { StoreState } from 'app/types';\r\nimport { LAST_USED_DATASOURCE_KEY, ensureQueries, DEFAULT_RANGE, DEFAULT_UI_STATE } from 'app/core/utils/explore';\r\nimport { Emitter } from 'app/core/utils/emitter';\r\nimport { ExploreToolbar } from './ExploreToolbar';\r\nimport { scanStopAction } from './state/actionTypes';\r\n\r\ninterface ExploreProps {\r\n  StartPage?: ComponentClass<ExploreStartPageProps>;\r\n  changeSize: typeof changeSize;\r\n  changeTime: typeof changeTime;\r\n  datasourceError: string;\r\n  datasourceInstance: ExploreDataSourceApi;\r\n  datasourceLoading: boolean | null;\r\n  datasourceMissing: boolean;\r\n  exploreId: ExploreId;\r\n  initializeExplore: typeof initializeExplore;\r\n  initialized: boolean;\r\n  modifyQueries: typeof modifyQueries;\r\n  range: RawTimeRange;\r\n  scanner?: RangeScanner;\r\n  scanning?: boolean;\r\n  scanRange?: RawTimeRange;\r\n  scanStart: typeof scanStart;\r\n  scanStopAction: typeof scanStopAction;\r\n  setQueries: typeof setQueries;\r\n  split: boolean;\r\n  showingStartPage?: boolean;\r\n  supportsGraph: boolean | null;\r\n  supportsLogs: boolean | null;\r\n  supportsTable: boolean | null;\r\n  urlState: ExploreUrlState;\r\n  queryKeys: string[];\r\n}\r\n\r\n/**\r\n * Explore provides an area for quick query iteration for a given datasource.\r\n * Once a datasource is selected it populates the query section at the top.\r\n * When queries are run, their results are being displayed in the main section.\r\n * The datasource determines what kind of query editor it brings, and what kind\r\n * of results viewers it supports. The state is managed entirely in Redux.\r\n *\r\n * SPLIT VIEW\r\n *\r\n * Explore can have two Explore areas side-by-side. This is handled in `Wrapper.tsx`.\r\n * Since there can be multiple Explores (e.g., left and right) each action needs\r\n * the `exploreId` as first parameter so that the reducer knows which Explore state\r\n * is affected.\r\n *\r\n * DATASOURCE REQUESTS\r\n *\r\n * A click on Run Query creates transactions for all DataQueries for all expanded\r\n * result viewers. New runs are discarding previous runs. Upon completion a transaction\r\n * saves the result. The result viewers construct their data from the currently existing\r\n * transactions.\r\n *\r\n * The result viewers determine some of the query options sent to the datasource, e.g.,\r\n * `format`, to indicate eventual transformations by the datasources' result transformers.\r\n */\r\nexport class Explore extends React.PureComponent<ExploreProps> {\r\n  el: any;\r\n  exploreEvents: Emitter;\r\n  /**\r\n   * Timepicker to control scanning\r\n   */\r\n  timepickerRef: React.RefObject<TimePicker>;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.exploreEvents = new Emitter();\r\n    this.timepickerRef = React.createRef();\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const { exploreId, initialized, urlState } = this.props;\r\n    // Don't initialize on split, but need to initialize urlparameters when present\r\n    if (!initialized) {\r\n      // Load URL state and parse range\r\n      const { datasource, queries, range = DEFAULT_RANGE, ui = DEFAULT_UI_STATE } = (urlState || {}) as ExploreUrlState;\r\n      const initialDatasource = datasource || store.get(LAST_USED_DATASOURCE_KEY);\r\n      const initialQueries: DataQuery[] = ensureQueries(queries);\r\n      const initialRange = { from: parseTime(range.from), to: parseTime(range.to) };\r\n      const width = this.el ? this.el.offsetWidth : 0;\r\n\r\n      this.props.initializeExplore(\r\n        exploreId,\r\n        initialDatasource,\r\n        initialQueries,\r\n        initialRange,\r\n        width,\r\n        this.exploreEvents,\r\n        ui\r\n      );\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.exploreEvents.removeAllListeners();\r\n  }\r\n\r\n  getRef = el => {\r\n    this.el = el;\r\n  };\r\n\r\n  onChangeTime = (range: TimeRange, changedByScanner?: boolean) => {\r\n    if (this.props.scanning && !changedByScanner) {\r\n      this.onStopScanning();\r\n    }\r\n    this.props.changeTime(this.props.exploreId, range);\r\n  };\r\n\r\n  // Use this in help pages to set page to a single query\r\n  onClickExample = (query: DataQuery) => {\r\n    this.props.setQueries(this.props.exploreId, [query]);\r\n  };\r\n\r\n  onClickLabel = (key: string, value: string) => {\r\n    this.onModifyQueries({ type: 'ADD_FILTER', key, value });\r\n  };\r\n\r\n  onModifyQueries = (action, index?: number) => {\r\n    const { datasourceInstance } = this.props;\r\n    if (datasourceInstance && datasourceInstance.modifyQuery) {\r\n      const modifier = (queries: DataQuery, modification: any) => datasourceInstance.modifyQuery(queries, modification);\r\n      this.props.modifyQueries(this.props.exploreId, action, index, modifier);\r\n    }\r\n  };\r\n\r\n  onResize = (size: { height: number; width: number }) => {\r\n    this.props.changeSize(this.props.exploreId, size);\r\n  };\r\n\r\n  onStartScanning = () => {\r\n    // Scanner will trigger a query\r\n    const scanner = this.scanPreviousRange;\r\n    this.props.scanStart(this.props.exploreId, scanner);\r\n  };\r\n\r\n  scanPreviousRange = (): RawTimeRange => {\r\n    // Calling move() on the timepicker will trigger this.onChangeTime()\r\n    return this.timepickerRef.current.move(-1, true);\r\n  };\r\n\r\n  onStopScanning = () => {\r\n    this.props.scanStopAction({ exploreId: this.props.exploreId });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      StartPage,\r\n      datasourceInstance,\r\n      datasourceError,\r\n      datasourceLoading,\r\n      datasourceMissing,\r\n      exploreId,\r\n      showingStartPage,\r\n      split,\r\n      supportsGraph,\r\n      supportsLogs,\r\n      supportsTable,\r\n      queryKeys,\r\n    } = this.props;\r\n    const exploreClass = split ? 'explore explore-split' : 'explore';\r\n\r\n    return (\r\n      <div className={exploreClass} ref={this.getRef}>\r\n        <ExploreToolbar exploreId={exploreId} timepickerRef={this.timepickerRef} onChangeTime={this.onChangeTime} />\r\n        {datasourceLoading ? <div className=\"explore-container\">Loading datasource...</div> : null}\r\n        {datasourceMissing ? (\r\n          <div className=\"explore-container\">Please add a datasource that supports Explore (e.g., Prometheus).</div>\r\n        ) : null}\r\n\r\n        {datasourceError && (\r\n          <div className=\"explore-container\">\r\n            <Alert message={`Error connecting to datasource: ${datasourceError}`} />\r\n          </div>\r\n        )}\r\n\r\n        {datasourceInstance && !datasourceError && (\r\n          <div className=\"explore-container\">\r\n            <QueryRows exploreEvents={this.exploreEvents} exploreId={exploreId} queryKeys={queryKeys} />\r\n            <AutoSizer onResize={this.onResize} disableHeight>\r\n              {({ width }) => {\r\n                if (width === 0) {\r\n                  return null;\r\n                }\r\n\r\n                return (\r\n                  <main className=\"m-t-2\" style={{ width }}>\r\n                    <ErrorBoundary>\r\n                      {showingStartPage && <StartPage onClickExample={this.onClickExample} />}\r\n                      {!showingStartPage && (\r\n                        <>\r\n                          {supportsGraph && !supportsLogs && <GraphContainer width={width} exploreId={exploreId} />}\r\n                          {supportsTable && <TableContainer exploreId={exploreId} onClickCell={this.onClickLabel} />}\r\n                          {supportsLogs && (\r\n                            <LogsContainer\r\n                              width={width}\r\n                              exploreId={exploreId}\r\n                              onChangeTime={this.onChangeTime}\r\n                              onClickLabel={this.onClickLabel}\r\n                              onStartScanning={this.onStartScanning}\r\n                              onStopScanning={this.onStopScanning}\r\n                            />\r\n                          )}\r\n                        </>\r\n                      )}\r\n                    </ErrorBoundary>\r\n                  </main>\r\n                );\r\n              }}\r\n            </AutoSizer>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state: StoreState, { exploreId }) {\r\n  const explore = state.explore;\r\n  const { split } = explore;\r\n  const item: ExploreItemState = explore[exploreId];\r\n  const {\r\n    StartPage,\r\n    datasourceError,\r\n    datasourceInstance,\r\n    datasourceLoading,\r\n    datasourceMissing,\r\n    initialized,\r\n    range,\r\n    showingStartPage,\r\n    supportsGraph,\r\n    supportsLogs,\r\n    supportsTable,\r\n    queryKeys,\r\n  } = item;\r\n  return {\r\n    StartPage,\r\n    datasourceError,\r\n    datasourceInstance,\r\n    datasourceLoading,\r\n    datasourceMissing,\r\n    initialized,\r\n    range,\r\n    showingStartPage,\r\n    split,\r\n    supportsGraph,\r\n    supportsLogs,\r\n    supportsTable,\r\n    queryKeys,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  changeSize,\r\n  changeTime,\r\n  initializeExplore,\r\n  modifyQueries,\r\n  scanStart,\r\n  scanStopAction,\r\n  setQueries,\r\n};\r\n\r\nexport default hot(module)(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(Explore)\r\n);\r\n","import React, { PureComponent } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { hot } from 'react-hot-loader';\r\n\r\nimport { ExploreId } from 'app/types/explore';\r\nimport { DataSourceSelectItem, RawTimeRange, TimeRange } from '@grafana/ui';\r\nimport { DataSourcePicker } from 'app/core/components/Select/DataSourcePicker';\r\nimport { StoreState } from 'app/types/store';\r\nimport { changeDatasource, clearQueries, splitClose, runQueries, splitOpen } from './state/actions';\r\nimport TimePicker from './TimePicker';\r\nimport { ClickOutsideWrapper } from 'app/core/components/ClickOutsideWrapper/ClickOutsideWrapper';\r\n\r\nenum IconSide {\r\n  left = 'left',\r\n  right = 'right',\r\n}\r\n\r\nconst createResponsiveButton = (options: {\r\n  splitted: boolean;\r\n  title: string;\r\n  onClick: () => void;\r\n  buttonClassName?: string;\r\n  iconClassName?: string;\r\n  iconSide?: IconSide;\r\n}) => {\r\n  const defaultOptions = {\r\n    iconSide: IconSide.left,\r\n  };\r\n  const props = { ...options, defaultOptions };\r\n  const { title, onClick, buttonClassName, iconClassName, splitted, iconSide } = props;\r\n\r\n  return (\r\n    <button className={`btn navbar-button ${buttonClassName ? buttonClassName : ''}`} onClick={onClick}>\r\n      {iconClassName && iconSide === IconSide.left ? <i className={`${iconClassName} icon-margin-right`} /> : null}\r\n      <span className=\"btn-title\">{!splitted ? title : ''}</span>\r\n      {iconClassName && iconSide === IconSide.right ? <i className={`${iconClassName} icon-margin-left`} /> : null}\r\n    </button>\r\n  );\r\n};\r\n\r\ninterface OwnProps {\r\n  exploreId: ExploreId;\r\n  timepickerRef: React.RefObject<TimePicker>;\r\n  onChangeTime: (range: TimeRange, changedByScanner?: boolean) => void;\r\n}\r\n\r\ninterface StateProps {\r\n  datasourceMissing: boolean;\r\n  exploreDatasources: DataSourceSelectItem[];\r\n  loading: boolean;\r\n  range: RawTimeRange;\r\n  selectedDatasource: DataSourceSelectItem;\r\n  splitted: boolean;\r\n}\r\n\r\ninterface DispatchProps {\r\n  changeDatasource: typeof changeDatasource;\r\n  clearAll: typeof clearQueries;\r\n  runQuery: typeof runQueries;\r\n  closeSplit: typeof splitClose;\r\n  split: typeof splitOpen;\r\n}\r\n\r\ntype Props = StateProps & DispatchProps & OwnProps;\r\n\r\nexport class UnConnectedExploreToolbar extends PureComponent<Props, {}> {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  onChangeDatasource = async option => {\r\n    this.props.changeDatasource(this.props.exploreId, option.value);\r\n  };\r\n\r\n  onClearAll = () => {\r\n    this.props.clearAll(this.props.exploreId);\r\n  };\r\n\r\n  onRunQuery = () => {\r\n    this.props.runQuery(this.props.exploreId);\r\n  };\r\n\r\n  onCloseTimePicker = () => {\r\n    this.props.timepickerRef.current.setState({ isOpen: false });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      datasourceMissing,\r\n      exploreDatasources,\r\n      exploreId,\r\n      loading,\r\n      range,\r\n      selectedDatasource,\r\n      splitted,\r\n      timepickerRef,\r\n    } = this.props;\r\n\r\n    return (\r\n      <div className={splitted ? 'explore-toolbar splitted' : 'explore-toolbar'}>\r\n        <div className=\"explore-toolbar-item\">\r\n          <div className=\"explore-toolbar-header\">\r\n            <div className=\"explore-toolbar-header-title\">\r\n              {exploreId === 'left' && (\r\n                <span className=\"navbar-page-btn\">\r\n                  <i className=\"gicon gicon-explore\" />\r\n                  Explore\r\n                </span>\r\n              )}\r\n            </div>\r\n            {exploreId === 'right' && (\r\n              <a className=\"explore-toolbar-header-close\" onClick={this.props.closeSplit}>\r\n                <i className=\"fa fa-times fa-fw\" />\r\n              </a>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"explore-toolbar-item\">\r\n          <div className=\"explore-toolbar-content\">\r\n            {!datasourceMissing ? (\r\n              <div className=\"explore-toolbar-content-item\">\r\n                <div className=\"datasource-picker\">\r\n                  <DataSourcePicker\r\n                    onChange={this.onChangeDatasource}\r\n                    datasources={exploreDatasources}\r\n                    current={selectedDatasource}\r\n                  />\r\n                </div>\r\n              </div>\r\n            ) : null}\r\n            {exploreId === 'left' && !splitted ? (\r\n              <div className=\"explore-toolbar-content-item\">\r\n                {createResponsiveButton({\r\n                  splitted,\r\n                  title: 'Split',\r\n                  onClick: this.props.split,\r\n                  iconClassName: 'fa fa-fw fa-columns icon-margin-right',\r\n                  iconSide: IconSide.left,\r\n                })}\r\n              </div>\r\n            ) : null}\r\n            <div className=\"explore-toolbar-content-item timepicker\">\r\n              <ClickOutsideWrapper onClick={this.onCloseTimePicker}>\r\n                <TimePicker ref={timepickerRef} range={range} onChangeTime={this.props.onChangeTime} />\r\n              </ClickOutsideWrapper>\r\n            </div>\r\n            <div className=\"explore-toolbar-content-item\">\r\n              <button className=\"btn navbar-button navbar-button--no-icon\" onClick={this.onClearAll}>\r\n                Clear All\r\n              </button>\r\n            </div>\r\n            <div className=\"explore-toolbar-content-item\">\r\n              {createResponsiveButton({\r\n                splitted,\r\n                title: 'Run Query',\r\n                onClick: this.onRunQuery,\r\n                buttonClassName: 'navbar-button--secondary',\r\n                iconClassName: loading ? 'fa fa-spinner fa-fw fa-spin run-icon' : 'fa fa-level-down fa-fw run-icon',\r\n                iconSide: IconSide.right,\r\n              })}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: StoreState, { exploreId }: OwnProps): StateProps => {\r\n  const splitted = state.explore.split;\r\n  const exploreItem = state.explore[exploreId];\r\n  const { datasourceInstance, datasourceMissing, exploreDatasources, queryTransactions, range } = exploreItem;\r\n  const selectedDatasource = datasourceInstance\r\n    ? exploreDatasources.find(datasource => datasource.name === datasourceInstance.name)\r\n    : undefined;\r\n  const loading = queryTransactions.some(qt => !qt.done);\r\n\r\n  return {\r\n    datasourceMissing,\r\n    exploreDatasources,\r\n    loading,\r\n    range,\r\n    selectedDatasource,\r\n    splitted,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps: DispatchProps = {\r\n  changeDatasource,\r\n  clearAll: clearQueries,\r\n  runQuery: runQueries,\r\n  closeSplit: splitClose,\r\n  split: splitOpen,\r\n};\r\n\r\nexport const ExploreToolbar = hot(module)(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(UnConnectedExploreToolbar)\r\n);\r\n","import $ from 'jquery';\r\nimport React, { PureComponent } from 'react';\r\nimport moment from 'moment';\r\n\r\nimport 'vendor/flot/jquery.flot';\r\nimport 'vendor/flot/jquery.flot.time';\r\nimport 'vendor/flot/jquery.flot.selection';\r\nimport 'vendor/flot/jquery.flot.stack';\r\n\r\nimport { RawTimeRange } from '@grafana/ui';\r\nimport * as dateMath from 'app/core/utils/datemath';\r\nimport TimeSeries from 'app/core/time_series2';\r\n\r\nimport Legend from './Legend';\r\nimport { equal, intersect } from './utils/set';\r\n\r\nconst MAX_NUMBER_OF_TIME_SERIES = 20;\r\n\r\n// Copied from graph.ts\r\nfunction time_format(ticks, min, max) {\r\n  if (min && max && ticks) {\r\n    const range = max - min;\r\n    const secPerTick = range / ticks / 1000;\r\n    const oneDay = 86400000;\r\n    const oneYear = 31536000000;\r\n\r\n    if (secPerTick <= 45) {\r\n      return '%H:%M:%S';\r\n    }\r\n    if (secPerTick <= 7200 || range <= oneDay) {\r\n      return '%H:%M';\r\n    }\r\n    if (secPerTick <= 80000) {\r\n      return '%m/%d %H:%M';\r\n    }\r\n    if (secPerTick <= 2419200 || range <= oneYear) {\r\n      return '%m/%d';\r\n    }\r\n    return '%Y-%m';\r\n  }\r\n\r\n  return '%H:%M';\r\n}\r\n\r\nconst FLOT_OPTIONS = {\r\n  legend: {\r\n    show: false,\r\n  },\r\n  series: {\r\n    lines: {\r\n      linewidth: 1,\r\n      zero: false,\r\n    },\r\n    shadowSize: 0,\r\n  },\r\n  grid: {\r\n    minBorderMargin: 0,\r\n    markings: [],\r\n    backgroundColor: null,\r\n    borderWidth: 0,\r\n    // hoverable: true,\r\n    clickable: true,\r\n    color: '#a1a1a1',\r\n    margin: { left: 0, right: 0 },\r\n    labelMarginX: 0,\r\n  },\r\n  selection: {\r\n    mode: 'x',\r\n    color: '#666',\r\n  },\r\n  // crosshair: {\r\n  //   mode: 'x',\r\n  // },\r\n};\r\n\r\ninterface GraphProps {\r\n  data: any[];\r\n  height?: number;\r\n  width?: number;\r\n  id?: string;\r\n  range: RawTimeRange;\r\n  split?: boolean;\r\n  userOptions?: any;\r\n  onChangeTime?: (range: RawTimeRange) => void;\r\n  onToggleSeries?: (alias: string, hiddenSeries: Set<string>) => void;\r\n}\r\n\r\ninterface GraphState {\r\n  /**\r\n   * Type parameter refers to the `alias` property of a `TimeSeries`.\r\n   * Consequently, all series sharing the same alias will share visibility state.\r\n   */\r\n  hiddenSeries: Set<string>;\r\n  showAllTimeSeries: boolean;\r\n}\r\n\r\nexport class Graph extends PureComponent<GraphProps, GraphState> {\r\n  $el: any;\r\n  dynamicOptions = null;\r\n\r\n  state = {\r\n    hiddenSeries: new Set(),\r\n    showAllTimeSeries: false,\r\n  };\r\n\r\n  getGraphData() {\r\n    const { data } = this.props;\r\n\r\n    return this.state.showAllTimeSeries ? data : data.slice(0, MAX_NUMBER_OF_TIME_SERIES);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.draw();\r\n    this.$el = $(`#${this.props.id}`);\r\n    this.$el.bind('plotselected', this.onPlotSelected);\r\n  }\r\n\r\n  componentDidUpdate(prevProps: GraphProps, prevState: GraphState) {\r\n    if (\r\n      prevProps.data !== this.props.data ||\r\n      prevProps.range !== this.props.range ||\r\n      prevProps.split !== this.props.split ||\r\n      prevProps.height !== this.props.height ||\r\n      prevProps.width !== this.props.width ||\r\n      !equal(prevState.hiddenSeries, this.state.hiddenSeries)\r\n    ) {\r\n      this.draw();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.$el.unbind('plotselected', this.onPlotSelected);\r\n  }\r\n\r\n  onPlotSelected = (event, ranges) => {\r\n    if (this.props.onChangeTime) {\r\n      const range = {\r\n        from: moment(ranges.xaxis.from),\r\n        to: moment(ranges.xaxis.to),\r\n      };\r\n      this.props.onChangeTime(range);\r\n    }\r\n  };\r\n\r\n  getDynamicOptions() {\r\n    const { range, width } = this.props;\r\n    const ticks = (width || 0) / 100;\r\n    let { from, to } = range;\r\n    if (!moment.isMoment(from)) {\r\n      from = dateMath.parse(from, false);\r\n    }\r\n    if (!moment.isMoment(to)) {\r\n      to = dateMath.parse(to, true);\r\n    }\r\n    const min = from.valueOf();\r\n    const max = to.valueOf();\r\n    return {\r\n      xaxis: {\r\n        mode: 'time',\r\n        min: min,\r\n        max: max,\r\n        label: 'Datetime',\r\n        ticks: ticks,\r\n        timezone: 'browser',\r\n        timeformat: time_format(ticks, min, max),\r\n      },\r\n    };\r\n  }\r\n\r\n  onShowAllTimeSeries = () => {\r\n    this.setState(\r\n      {\r\n        showAllTimeSeries: true,\r\n      },\r\n      this.draw\r\n    );\r\n  };\r\n\r\n  onToggleSeries = (series: TimeSeries, exclusive: boolean) => {\r\n    this.setState((state, props) => {\r\n      const { data, onToggleSeries } = props;\r\n      const { hiddenSeries } = state;\r\n\r\n      // Deduplicate series as visibility tracks the alias property\r\n      const oneSeriesVisible = hiddenSeries.size === new Set(data.map(d => d.alias)).size - 1;\r\n\r\n      let nextHiddenSeries = new Set();\r\n      if (exclusive) {\r\n        if (hiddenSeries.has(series.alias) || !oneSeriesVisible) {\r\n          nextHiddenSeries = new Set(data.filter(d => d.alias !== series.alias).map(d => d.alias));\r\n        }\r\n      } else {\r\n        // Prune hidden series no longer part of those available from the most recent query\r\n        const availableSeries = new Set(data.map(d => d.alias));\r\n        nextHiddenSeries = intersect(new Set(hiddenSeries), availableSeries);\r\n        if (nextHiddenSeries.has(series.alias)) {\r\n          nextHiddenSeries.delete(series.alias);\r\n        } else {\r\n          nextHiddenSeries.add(series.alias);\r\n        }\r\n      }\r\n      if (onToggleSeries) {\r\n        onToggleSeries(series.alias, nextHiddenSeries);\r\n      }\r\n      return {\r\n        hiddenSeries: nextHiddenSeries,\r\n      };\r\n    }, this.draw);\r\n  };\r\n\r\n  draw() {\r\n    const { userOptions = {} } = this.props;\r\n    const { hiddenSeries } = this.state;\r\n    const data = this.getGraphData();\r\n\r\n    const $el = $(`#${this.props.id}`);\r\n    let series = [{ data: [[0, 0]] }];\r\n\r\n    if (data && data.length > 0) {\r\n      series = data\r\n        .filter((ts: TimeSeries) => !hiddenSeries.has(ts.alias))\r\n        .map((ts: TimeSeries) => ({\r\n          color: ts.color,\r\n          label: ts.label,\r\n          data: ts.getFlotPairs('null'),\r\n        }));\r\n    }\r\n\r\n    this.dynamicOptions = this.getDynamicOptions();\r\n\r\n    const options = {\r\n      ...FLOT_OPTIONS,\r\n      ...this.dynamicOptions,\r\n      ...userOptions,\r\n    };\r\n\r\n    $.plot($el, series, options);\r\n  }\r\n\r\n  render() {\r\n    const { height = 100, id = 'graph' } = this.props;\r\n    const { hiddenSeries } = this.state;\r\n    const data = this.getGraphData();\r\n\r\n    return (\r\n      <>\r\n        {this.props.data && this.props.data.length > MAX_NUMBER_OF_TIME_SERIES && !this.state.showAllTimeSeries && (\r\n          <div className=\"time-series-disclaimer\">\r\n            <i className=\"fa fa-fw fa-warning disclaimer-icon\" />\r\n            {`Showing only ${MAX_NUMBER_OF_TIME_SERIES} time series. `}\r\n            <span className=\"show-all-time-series\" onClick={this.onShowAllTimeSeries}>{`Show all ${\r\n              this.props.data.length\r\n            }`}</span>\r\n          </div>\r\n        )}\r\n        <div id={id} className=\"explore-graph\" style={{ height }} />\r\n        <Legend data={data} hiddenSeries={hiddenSeries} onToggleSeries={this.onToggleSeries} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Graph;\r\n","import React, { PureComponent } from 'react';\r\nimport { hot } from 'react-hot-loader';\r\nimport { connect } from 'react-redux';\r\nimport { TimeRange, RawTimeRange } from '@grafana/ui';\r\n\r\nimport { ExploreId, ExploreItemState } from 'app/types/explore';\r\nimport { StoreState } from 'app/types';\r\n\r\nimport { toggleGraph, changeTime } from './state/actions';\r\nimport Graph from './Graph';\r\nimport Panel from './Panel';\r\n\r\ninterface GraphContainerProps {\r\n  exploreId: ExploreId;\r\n  graphResult?: any[];\r\n  loading: boolean;\r\n  range: RawTimeRange;\r\n  showingGraph: boolean;\r\n  showingTable: boolean;\r\n  split: boolean;\r\n  toggleGraph: typeof toggleGraph;\r\n  changeTime: typeof changeTime;\r\n  width: number;\r\n}\r\n\r\nexport class GraphContainer extends PureComponent<GraphContainerProps> {\r\n  onClickGraphButton = () => {\r\n    this.props.toggleGraph(this.props.exploreId, this.props.showingGraph);\r\n  };\r\n\r\n  onChangeTime = (timeRange: TimeRange) => {\r\n    this.props.changeTime(this.props.exploreId, timeRange);\r\n  };\r\n\r\n  render() {\r\n    const { exploreId, graphResult, loading, showingGraph, showingTable, range, split, width } = this.props;\r\n    const graphHeight = showingGraph && showingTable ? 200 : 400;\r\n\r\n    if (!graphResult) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <Panel label=\"Graph\" isOpen={showingGraph} loading={loading} onToggle={this.onClickGraphButton}>\r\n        <Graph\r\n          data={graphResult}\r\n          height={graphHeight}\r\n          id={`explore-graph-${exploreId}`}\r\n          onChangeTime={this.onChangeTime}\r\n          range={range}\r\n          split={split}\r\n          width={width}\r\n        />\r\n      </Panel>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state: StoreState, { exploreId }) {\r\n  const explore = state.explore;\r\n  const { split } = explore;\r\n  const item: ExploreItemState = explore[exploreId];\r\n  const { graphResult, queryTransactions, range, showingGraph, showingTable } = item;\r\n  const loading = queryTransactions.some(qt => qt.resultType === 'Graph' && !qt.done);\r\n  return { graphResult, loading, range, showingGraph, showingTable, split };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  toggleGraph,\r\n  changeTime,\r\n};\r\n\r\nexport default hot(module)(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(GraphContainer)\r\n);\r\n","import React, { MouseEvent, PureComponent } from 'react';\r\nimport classNames from 'classnames';\r\nimport { TimeSeries } from 'app/core/core';\r\n\r\ninterface LegendProps {\r\n  data: TimeSeries[];\r\n  hiddenSeries: Set<string>;\r\n  onToggleSeries?: (series: TimeSeries, exclusive: boolean) => void;\r\n}\r\n\r\ninterface LegendItemProps {\r\n  hidden: boolean;\r\n  onClickLabel?: (series: TimeSeries, event: MouseEvent) => void;\r\n  series: TimeSeries;\r\n}\r\n\r\nclass LegendItem extends PureComponent<LegendItemProps> {\r\n  onClickLabel = e => this.props.onClickLabel(this.props.series, e);\r\n\r\n  render() {\r\n    const { hidden, series } = this.props;\r\n    const seriesClasses = classNames({\r\n      'graph-legend-series-hidden': hidden,\r\n    });\r\n    return (\r\n      <div className={`graph-legend-series ${seriesClasses}`}>\r\n        <div className=\"graph-legend-icon\">\r\n          <i className=\"fa fa-minus pointer\" style={{ color: series.color }} />\r\n        </div>\r\n        <a className=\"graph-legend-alias pointer\" title={series.alias} onClick={this.onClickLabel}>\r\n          {series.alias}\r\n        </a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default class Legend extends PureComponent<LegendProps> {\r\n  static defaultProps = {\r\n    onToggleSeries: () => {},\r\n  };\r\n\r\n  onClickLabel = (series: TimeSeries, event: MouseEvent) => {\r\n    const { onToggleSeries } = this.props;\r\n    const exclusive = event.ctrlKey || event.metaKey || event.shiftKey;\r\n    onToggleSeries(series, !exclusive);\r\n  };\r\n\r\n  render() {\r\n    const { data, hiddenSeries } = this.props;\r\n    const items = data || [];\r\n    return (\r\n      <div className=\"graph-legend ps\">\r\n        {items.map((series, i) => (\r\n          <LegendItem\r\n            hidden={hiddenSeries.has(series.alias)}\r\n            // Workaround to resolve conflicts since series visibility tracks the alias property\r\n            key={`${series.id}-${i}`}\r\n            onClickLabel={this.onClickLabel}\r\n            series={series}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { PureComponent } from 'react';\r\n\r\nimport { calculateLogsLabelStats, LogLabelStatsModel, LogRowModel } from 'app/core/logs_model';\r\nimport { LogLabelStats } from './LogLabelStats';\r\n\r\ninterface Props {\r\n  getRows?: () => LogRowModel[];\r\n  label: string;\r\n  plain?: boolean;\r\n  value: string;\r\n  onClickLabel?: (label: string, value: string) => void;\r\n}\r\n\r\ninterface State {\r\n  showStats: boolean;\r\n  stats: LogLabelStatsModel[];\r\n}\r\n\r\nexport class LogLabel extends PureComponent<Props, State> {\r\n  state = {\r\n    stats: null,\r\n    showStats: false,\r\n  };\r\n\r\n  onClickClose = () => {\r\n    this.setState({ showStats: false });\r\n  };\r\n\r\n  onClickLabel = () => {\r\n    const { onClickLabel, label, value } = this.props;\r\n    if (onClickLabel) {\r\n      onClickLabel(label, value);\r\n    }\r\n  };\r\n\r\n  onClickStats = () => {\r\n    this.setState(state => {\r\n      if (state.showStats) {\r\n        return { showStats: false, stats: null };\r\n      }\r\n      const allRows = this.props.getRows();\r\n      const stats = calculateLogsLabelStats(allRows, this.props.label);\r\n      return { showStats: true, stats };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { getRows, label, plain, value } = this.props;\r\n    const { showStats, stats } = this.state;\r\n    const tooltip = `${label}: ${value}`;\r\n    return (\r\n      <span className=\"logs-label\">\r\n        <span className=\"logs-label__value\" title={tooltip}>\r\n          {value}\r\n        </span>\r\n        {!plain && (\r\n          <span title=\"Filter for label\" onClick={this.onClickLabel} className=\"logs-label__icon fa fa-search-plus\" />\r\n        )}\r\n        {!plain && getRows && <span onClick={this.onClickStats} className=\"logs-label__icon fa fa-signal\" />}\r\n        {showStats && (\r\n          <span className=\"logs-label__stats\">\r\n            <LogLabelStats\r\n              stats={stats}\r\n              rowCount={getRows().length}\r\n              label={label}\r\n              value={value}\r\n              onClickClose={this.onClickClose}\r\n            />\r\n          </span>\r\n        )}\r\n      </span>\r\n    );\r\n  }\r\n}\r\n","import React, { PureComponent } from 'react';\r\nimport classnames from 'classnames';\r\nimport { LogLabelStatsModel } from 'app/core/logs_model';\r\n\r\nfunction LogLabelStatsRow(logLabelStatsModel: LogLabelStatsModel) {\r\n  const { active, count, proportion, value } = logLabelStatsModel;\r\n  const percent = `${Math.round(proportion * 100)}%`;\r\n  const barStyle = { width: percent };\r\n  const className = classnames('logs-stats-row', { 'logs-stats-row--active': active });\r\n\r\n  return (\r\n    <div className={className}>\r\n      <div className=\"logs-stats-row__label\">\r\n        <div className=\"logs-stats-row__value\">{value}</div>\r\n        <div className=\"logs-stats-row__count\">{count}</div>\r\n        <div className=\"logs-stats-row__percent\">{percent}</div>\r\n      </div>\r\n      <div className=\"logs-stats-row__bar\">\r\n        <div className=\"logs-stats-row__innerbar\" style={barStyle} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst STATS_ROW_LIMIT = 5;\r\n\r\ninterface Props {\r\n  stats: LogLabelStatsModel[];\r\n  label: string;\r\n  value: string;\r\n  rowCount: number;\r\n  onClickClose: () => void;\r\n}\r\n\r\nexport class LogLabelStats extends PureComponent<Props> {\r\n  render() {\r\n    const { label, rowCount, stats, value, onClickClose } = this.props;\r\n    const topRows = stats.slice(0, STATS_ROW_LIMIT);\r\n    let activeRow = topRows.find(row => row.value === value);\r\n    let otherRows = stats.slice(STATS_ROW_LIMIT);\r\n    const insertActiveRow = !activeRow;\r\n\r\n    // Remove active row from other to show extra\r\n    if (insertActiveRow) {\r\n      activeRow = otherRows.find(row => row.value === value);\r\n      otherRows = otherRows.filter(row => row.value !== value);\r\n    }\r\n\r\n    const otherCount = otherRows.reduce((sum, row) => sum + row.count, 0);\r\n    const topCount = topRows.reduce((sum, row) => sum + row.count, 0);\r\n    const total = topCount + otherCount;\r\n    const otherProportion = otherCount / total;\r\n\r\n    return (\r\n      <div className=\"logs-stats\">\r\n        <div className=\"logs-stats__header\">\r\n          <span className=\"logs-stats__title\">\r\n            {label}: {total} of {rowCount} rows have that label\r\n          </span>\r\n          <span className=\"logs-stats__close fa fa-remove\" onClick={onClickClose} />\r\n        </div>\r\n        <div className=\"logs-stats__body\">\r\n          {topRows.map(stat => (\r\n            <LogLabelStatsRow key={stat.value} {...stat} active={stat.value === value} />\r\n          ))}\r\n          {insertActiveRow && activeRow && <LogLabelStatsRow key={activeRow.value} {...activeRow} active />}\r\n          {otherCount > 0 && (\r\n            <LogLabelStatsRow key=\"__OTHERS__\" count={otherCount} value=\"Other\" proportion={otherProportion} />\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { PureComponent } from 'react';\r\n\r\nimport { LogsStreamLabels, LogRowModel } from 'app/core/logs_model';\r\nimport { LogLabel } from './LogLabel';\r\n\r\ninterface Props {\r\n  getRows?: () => LogRowModel[];\r\n  labels: LogsStreamLabels;\r\n  plain?: boolean;\r\n  onClickLabel?: (label: string, value: string) => void;\r\n}\r\n\r\nexport class LogLabels extends PureComponent<Props> {\r\n  render() {\r\n    const { getRows, labels, onClickLabel, plain } = this.props;\r\n    return Object.keys(labels).map(key => (\r\n      <LogLabel key={key} getRows={getRows} label={key} value={labels[key]} plain={plain} onClickLabel={onClickLabel} />\r\n    ));\r\n  }\r\n}\r\n","import React, { PureComponent } from 'react';\r\nimport _ from 'lodash';\r\nimport Highlighter from 'react-highlight-words';\r\nimport classnames from 'classnames';\r\n\r\nimport { LogRowModel, LogLabelStatsModel, LogsParser, calculateFieldStats, getParser } from 'app/core/logs_model';\r\nimport { LogLabels } from './LogLabels';\r\nimport { findHighlightChunksInText } from 'app/core/utils/text';\r\nimport { LogLabelStats } from './LogLabelStats';\r\n\r\ninterface Props {\r\n  highlighterExpressions?: string[];\r\n  row: LogRowModel;\r\n  showDuplicates: boolean;\r\n  showLabels: boolean | null; // Tristate: null means auto\r\n  showLocalTime: boolean;\r\n  showUtc: boolean;\r\n  getRows: () => LogRowModel[];\r\n  onClickLabel?: (label: string, value: string) => void;\r\n}\r\n\r\ninterface State {\r\n  fieldCount: number;\r\n  fieldLabel: string;\r\n  fieldStats: LogLabelStatsModel[];\r\n  fieldValue: string;\r\n  parsed: boolean;\r\n  parser?: LogsParser;\r\n  parsedFieldHighlights: string[];\r\n  showFieldStats: boolean;\r\n}\r\n\r\n/**\r\n * Renders a highlighted field.\r\n * When hovering, a stats icon is shown.\r\n */\r\nconst FieldHighlight = onClick => props => {\r\n  return (\r\n    <span className={props.className} style={props.style}>\r\n      {props.children}\r\n      <span className=\"logs-row__field-highlight--icon fa fa-signal\" onClick={() => onClick(props.children)} />\r\n    </span>\r\n  );\r\n};\r\n\r\n/**\r\n * Renders a log line.\r\n *\r\n * When user hovers over it for a certain time, it lazily parses the log line.\r\n * Once a parser is found, it will determine fields, that will be highlighted.\r\n * When the user requests stats for a field, they will be calculated and rendered below the row.\r\n */\r\nexport class LogRow extends PureComponent<Props, State> {\r\n  mouseMessageTimer: NodeJS.Timer;\r\n\r\n  state = {\r\n    fieldCount: 0,\r\n    fieldLabel: null,\r\n    fieldStats: null,\r\n    fieldValue: null,\r\n    parsed: false,\r\n    parser: undefined,\r\n    parsedFieldHighlights: [],\r\n    showFieldStats: false,\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    clearTimeout(this.mouseMessageTimer);\r\n  }\r\n\r\n  onClickClose = () => {\r\n    this.setState({ showFieldStats: false });\r\n  };\r\n\r\n  onClickHighlight = (fieldText: string) => {\r\n    const { getRows } = this.props;\r\n    const { parser } = this.state;\r\n    const allRows = getRows();\r\n\r\n    // Build value-agnostic row matcher based on the field label\r\n    const fieldLabel = parser.getLabelFromField(fieldText);\r\n    const fieldValue = parser.getValueFromField(fieldText);\r\n    const matcher = parser.buildMatcher(fieldLabel);\r\n    const fieldStats = calculateFieldStats(allRows, matcher);\r\n    const fieldCount = fieldStats.reduce((sum, stat) => sum + stat.count, 0);\r\n\r\n    this.setState({ fieldCount, fieldLabel, fieldStats, fieldValue, showFieldStats: true });\r\n  };\r\n\r\n  onMouseOverMessage = () => {\r\n    // Don't parse right away, user might move along\r\n    this.mouseMessageTimer = setTimeout(this.parseMessage, 500);\r\n  };\r\n\r\n  onMouseOutMessage = () => {\r\n    clearTimeout(this.mouseMessageTimer);\r\n    this.setState({ parsed: false });\r\n  };\r\n\r\n  parseMessage = () => {\r\n    if (!this.state.parsed) {\r\n      const { row } = this.props;\r\n      const parser = getParser(row.entry);\r\n      if (parser) {\r\n        // Use parser to highlight detected fields\r\n        const parsedFieldHighlights = parser.getFields(this.props.row.entry);\r\n        this.setState({ parsedFieldHighlights, parsed: true, parser });\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      getRows,\r\n      highlighterExpressions,\r\n      onClickLabel,\r\n      row,\r\n      showDuplicates,\r\n      showLabels,\r\n      showLocalTime,\r\n      showUtc,\r\n    } = this.props;\r\n    const {\r\n      fieldCount,\r\n      fieldLabel,\r\n      fieldStats,\r\n      fieldValue,\r\n      parsed,\r\n      parsedFieldHighlights,\r\n      showFieldStats,\r\n    } = this.state;\r\n    const previewHighlights = highlighterExpressions && !_.isEqual(highlighterExpressions, row.searchWords);\r\n    const highlights = previewHighlights ? highlighterExpressions : row.searchWords;\r\n    const needsHighlighter = highlights && highlights.length > 0;\r\n    const highlightClassName = classnames('logs-row__match-highlight', {\r\n      'logs-row__match-highlight--preview': previewHighlights,\r\n    });\r\n    return (\r\n      <div className=\"logs-row\">\r\n        {showDuplicates && (\r\n          <div className=\"logs-row__duplicates\">{row.duplicates > 0 ? `${row.duplicates + 1}x` : null}</div>\r\n        )}\r\n        <div className={row.logLevel ? `logs-row__level logs-row__level--${row.logLevel}` : ''} />\r\n        {showUtc && (\r\n          <div className=\"logs-row__time\" title={`Local: ${row.timeLocal} (${row.timeFromNow})`}>\r\n            {row.timestamp}\r\n          </div>\r\n        )}\r\n        {showLocalTime && (\r\n          <div className=\"logs-row__time\" title={`${row.timestamp} (${row.timeFromNow})`}>\r\n            {row.timeLocal}\r\n          </div>\r\n        )}\r\n        {showLabels && (\r\n          <div className=\"logs-row__labels\">\r\n            <LogLabels getRows={getRows} labels={row.uniqueLabels} onClickLabel={onClickLabel} />\r\n          </div>\r\n        )}\r\n        <div className=\"logs-row__message\" onMouseEnter={this.onMouseOverMessage} onMouseLeave={this.onMouseOutMessage}>\r\n          {parsed && (\r\n            <Highlighter\r\n              autoEscape\r\n              highlightTag={FieldHighlight(this.onClickHighlight)}\r\n              textToHighlight={row.entry}\r\n              searchWords={parsedFieldHighlights}\r\n              highlightClassName=\"logs-row__field-highlight\"\r\n            />\r\n          )}\r\n          {!parsed && needsHighlighter && (\r\n            <Highlighter\r\n              textToHighlight={row.entry}\r\n              searchWords={highlights}\r\n              findChunks={findHighlightChunksInText}\r\n              highlightClassName={highlightClassName}\r\n            />\r\n          )}\r\n          {!parsed && !needsHighlighter && row.entry}\r\n          {showFieldStats && (\r\n            <div className=\"logs-row__stats\">\r\n              <LogLabelStats\r\n                stats={fieldStats}\r\n                label={fieldLabel}\r\n                value={fieldValue}\r\n                onClickClose={this.onClickClose}\r\n                rowCount={fieldCount}\r\n              />\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import _ from 'lodash';\r\nimport React, { PureComponent } from 'react';\r\n\r\nimport * as rangeUtil from 'app/core/utils/rangeutil';\r\nimport { RawTimeRange, Switch } from '@grafana/ui';\r\nimport TimeSeries from 'app/core/time_series2';\r\n\r\nimport { LogsDedupDescription, LogsDedupStrategy, LogsModel, LogLevel, LogsMetaKind } from 'app/core/logs_model';\r\n\r\nimport ToggleButtonGroup, { ToggleButton } from 'app/core/components/ToggleButtonGroup/ToggleButtonGroup';\r\n\r\nimport Graph from './Graph';\r\nimport { LogLabels } from './LogLabels';\r\nimport { LogRow } from './LogRow';\r\n\r\nconst PREVIEW_LIMIT = 100;\r\n\r\nconst graphOptions = {\r\n  series: {\r\n    stack: true,\r\n    bars: {\r\n      show: true,\r\n      lineWidth: 5,\r\n      // barWidth: 10,\r\n    },\r\n    // stack: true,\r\n  },\r\n  yaxis: {\r\n    tickDecimals: 0,\r\n  },\r\n};\r\n\r\nfunction renderMetaItem(value: any, kind: LogsMetaKind) {\r\n  if (kind === LogsMetaKind.LabelsMap) {\r\n    return (\r\n      <span className=\"logs-meta-item__labels\">\r\n        <LogLabels labels={value} plain />\r\n      </span>\r\n    );\r\n  }\r\n  return value;\r\n}\r\n\r\ninterface Props {\r\n  data?: LogsModel;\r\n  dedupedData?: LogsModel;\r\n  width: number;\r\n  exploreId: string;\r\n  highlighterExpressions: string[];\r\n  loading: boolean;\r\n  range?: RawTimeRange;\r\n  scanning?: boolean;\r\n  scanRange?: RawTimeRange;\r\n  dedupStrategy: LogsDedupStrategy;\r\n  hiddenLogLevels: Set<LogLevel>;\r\n  onChangeTime?: (range: RawTimeRange) => void;\r\n  onClickLabel?: (label: string, value: string) => void;\r\n  onStartScanning?: () => void;\r\n  onStopScanning?: () => void;\r\n  onDedupStrategyChange: (dedupStrategy: LogsDedupStrategy) => void;\r\n  onToggleLogLevel: (hiddenLogLevels: Set<LogLevel>) => void;\r\n}\r\n\r\ninterface State {\r\n  deferLogs: boolean;\r\n  renderAll: boolean;\r\n  showLabels: boolean | null; // Tristate: null means auto\r\n  showLocalTime: boolean;\r\n  showUtc: boolean;\r\n}\r\n\r\nexport default class Logs extends PureComponent<Props, State> {\r\n  deferLogsTimer: NodeJS.Timer;\r\n  renderAllTimer: NodeJS.Timer;\r\n\r\n  state = {\r\n    deferLogs: true,\r\n    renderAll: false,\r\n    showLabels: null,\r\n    showLocalTime: true,\r\n    showUtc: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    // Staged rendering\r\n    if (this.state.deferLogs) {\r\n      const { data } = this.props;\r\n      const rowCount = data && data.rows ? data.rows.length : 0;\r\n      // Render all right away if not too far over the limit\r\n      const renderAll = rowCount <= PREVIEW_LIMIT * 2;\r\n      this.deferLogsTimer = setTimeout(() => this.setState({ deferLogs: false, renderAll }), rowCount);\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    // Staged rendering\r\n    if (prevState.deferLogs && !this.state.deferLogs && !this.state.renderAll) {\r\n      this.renderAllTimer = setTimeout(() => this.setState({ renderAll: true }), 2000);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearTimeout(this.deferLogsTimer);\r\n    clearTimeout(this.renderAllTimer);\r\n  }\r\n\r\n  onChangeDedup = (dedup: LogsDedupStrategy) => {\r\n    const { onDedupStrategyChange } = this.props;\r\n    if (this.props.dedupStrategy === dedup) {\r\n      return onDedupStrategyChange(LogsDedupStrategy.none);\r\n    }\r\n    return onDedupStrategyChange(dedup);\r\n  };\r\n\r\n  onChangeLabels = (event: React.SyntheticEvent) => {\r\n    const target = event.target as HTMLInputElement;\r\n    this.setState({\r\n      showLabels: target.checked,\r\n    });\r\n  };\r\n\r\n  onChangeLocalTime = (event: React.SyntheticEvent) => {\r\n    const target = event.target as HTMLInputElement;\r\n    this.setState({\r\n      showLocalTime: target.checked,\r\n    });\r\n  };\r\n\r\n  onChangeUtc = (event: React.SyntheticEvent) => {\r\n    const target = event.target as HTMLInputElement;\r\n    this.setState({\r\n      showUtc: target.checked,\r\n    });\r\n  };\r\n\r\n  onToggleLogLevel = (rawLevel: string, hiddenRawLevels: Set<string>) => {\r\n    const hiddenLogLevels: Set<LogLevel> = new Set(Array.from(hiddenRawLevels).map(level => LogLevel[level]));\r\n    this.props.onToggleLogLevel(hiddenLogLevels);\r\n  };\r\n\r\n  onClickScan = (event: React.SyntheticEvent) => {\r\n    event.preventDefault();\r\n    this.props.onStartScanning();\r\n  };\r\n\r\n  onClickStopScan = (event: React.SyntheticEvent) => {\r\n    event.preventDefault();\r\n    this.props.onStopScanning();\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      data,\r\n      exploreId,\r\n      highlighterExpressions,\r\n      loading = false,\r\n      onClickLabel,\r\n      range,\r\n      scanning,\r\n      scanRange,\r\n      width,\r\n      dedupedData,\r\n    } = this.props;\r\n\r\n    if (!data) {\r\n      return null;\r\n    }\r\n\r\n    const { deferLogs, renderAll, showLocalTime, showUtc } = this.state;\r\n    let { showLabels } = this.state;\r\n    const { dedupStrategy } = this.props;\r\n    const hasData = data && data.rows && data.rows.length > 0;\r\n    const showDuplicates = dedupStrategy !== LogsDedupStrategy.none;\r\n    const dedupCount = dedupedData.rows.reduce((sum, row) => sum + row.duplicates, 0);\r\n    const meta = [...data.meta];\r\n\r\n    if (dedupStrategy !== LogsDedupStrategy.none) {\r\n      meta.push({\r\n        label: 'Dedup count',\r\n        value: dedupCount,\r\n        kind: LogsMetaKind.Number,\r\n      });\r\n    }\r\n\r\n    // Staged rendering\r\n    const processedRows = dedupedData.rows;\r\n    const firstRows = processedRows.slice(0, PREVIEW_LIMIT);\r\n    const lastRows = processedRows.slice(PREVIEW_LIMIT);\r\n\r\n    // Check for labels\r\n    if (showLabels === null) {\r\n      if (hasData) {\r\n        showLabels = data.rows.some(row => _.size(row.uniqueLabels) > 0);\r\n      } else {\r\n        showLabels = true;\r\n      }\r\n    }\r\n\r\n    const scanText = scanRange ? `Scanning ${rangeUtil.describeTimeRange(scanRange)}` : 'Scanning...';\r\n\r\n    // React profiler becomes unusable if we pass all rows to all rows and their labels, using getter instead\r\n    const getRows = () => processedRows;\r\n    const timeSeries = data.series.map(series => new TimeSeries(series));\r\n\r\n    return (\r\n      <div className=\"logs-panel\">\r\n        <div className=\"logs-panel-graph\">\r\n          <Graph\r\n            data={timeSeries}\r\n            height={100}\r\n            width={width}\r\n            range={range}\r\n            id={`explore-logs-graph-${exploreId}`}\r\n            onChangeTime={this.props.onChangeTime}\r\n            onToggleSeries={this.onToggleLogLevel}\r\n            userOptions={graphOptions}\r\n          />\r\n        </div>\r\n        <div className=\"logs-panel-options\">\r\n          <div className=\"logs-panel-controls\">\r\n            <Switch label=\"Timestamp\" checked={showUtc} onChange={this.onChangeUtc} transparent />\r\n            <Switch label=\"Local time\" checked={showLocalTime} onChange={this.onChangeLocalTime} transparent />\r\n            <Switch label=\"Labels\" checked={showLabels} onChange={this.onChangeLabels} transparent />\r\n            <ToggleButtonGroup label=\"Dedup\" transparent={true}>\r\n              {Object.keys(LogsDedupStrategy).map((dedupType, i) => (\r\n                <ToggleButton\r\n                  key={i}\r\n                  value={dedupType}\r\n                  onChange={this.onChangeDedup}\r\n                  selected={dedupStrategy === dedupType}\r\n                  tooltip={LogsDedupDescription[dedupType]}\r\n                >\r\n                  {dedupType}\r\n                </ToggleButton>\r\n              ))}\r\n            </ToggleButtonGroup>\r\n          </div>\r\n        </div>\r\n\r\n        {hasData && meta && (\r\n          <div className=\"logs-panel-meta\">\r\n            {meta.map(item => (\r\n              <div className=\"logs-panel-meta__item\" key={item.label}>\r\n                <span className=\"logs-panel-meta__label\">{item.label}:</span>\r\n                <span className=\"logs-panel-meta__value\">{renderMetaItem(item.value, item.kind)}</span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"logs-rows\">\r\n          {hasData &&\r\n          !deferLogs && // Only inject highlighterExpression in the first set for performance reasons\r\n            firstRows.map(row => (\r\n              <LogRow\r\n                key={row.key + row.duplicates}\r\n                getRows={getRows}\r\n                highlighterExpressions={highlighterExpressions}\r\n                row={row}\r\n                showDuplicates={showDuplicates}\r\n                showLabels={showLabels}\r\n                showLocalTime={showLocalTime}\r\n                showUtc={showUtc}\r\n                onClickLabel={onClickLabel}\r\n              />\r\n            ))}\r\n          {hasData &&\r\n            !deferLogs &&\r\n            renderAll &&\r\n            lastRows.map(row => (\r\n              <LogRow\r\n                key={row.key + row.duplicates}\r\n                getRows={getRows}\r\n                row={row}\r\n                showDuplicates={showDuplicates}\r\n                showLabels={showLabels}\r\n                showLocalTime={showLocalTime}\r\n                showUtc={showUtc}\r\n                onClickLabel={onClickLabel}\r\n              />\r\n            ))}\r\n          {hasData && deferLogs && <span>Rendering {dedupedData.rows.length} rows...</span>}\r\n        </div>\r\n        {!loading && !hasData && !scanning && (\r\n          <div className=\"logs-panel-nodata\">\r\n            No logs found.\r\n            <a className=\"link\" onClick={this.onClickScan}>\r\n              Scan for older logs\r\n            </a>\r\n          </div>\r\n        )}\r\n\r\n        {scanning && (\r\n          <div className=\"logs-panel-nodata\">\r\n            <span>{scanText}</span>\r\n            <a className=\"link\" onClick={this.onClickStopScan}>\r\n              Stop scan\r\n            </a>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { PureComponent } from 'react';\r\nimport { hot } from 'react-hot-loader';\r\nimport { connect } from 'react-redux';\r\nimport { RawTimeRange, TimeRange } from '@grafana/ui';\r\n\r\nimport { ExploreId, ExploreItemState } from 'app/types/explore';\r\nimport { LogsModel, LogsDedupStrategy, LogLevel } from 'app/core/logs_model';\r\nimport { StoreState } from 'app/types';\r\n\r\nimport { toggleLogs, changeDedupStrategy } from './state/actions';\r\nimport Logs from './Logs';\r\nimport Panel from './Panel';\r\nimport { toggleLogLevelAction } from 'app/features/explore/state/actionTypes';\r\nimport { deduplicatedLogsSelector, exploreItemUIStateSelector } from 'app/features/explore/state/selectors';\r\n\r\ninterface LogsContainerProps {\r\n  exploreId: ExploreId;\r\n  loading: boolean;\r\n  logsHighlighterExpressions?: string[];\r\n  logsResult?: LogsModel;\r\n  dedupedResult?: LogsModel;\r\n  onChangeTime: (range: TimeRange) => void;\r\n  onClickLabel: (key: string, value: string) => void;\r\n  onStartScanning: () => void;\r\n  onStopScanning: () => void;\r\n  range: RawTimeRange;\r\n  scanning?: boolean;\r\n  scanRange?: RawTimeRange;\r\n  showingLogs: boolean;\r\n  toggleLogs: typeof toggleLogs;\r\n  toggleLogLevelAction: typeof toggleLogLevelAction;\r\n  changeDedupStrategy: typeof changeDedupStrategy;\r\n  dedupStrategy: LogsDedupStrategy;\r\n  hiddenLogLevels: Set<LogLevel>;\r\n  width: number;\r\n}\r\n\r\nexport class LogsContainer extends PureComponent<LogsContainerProps> {\r\n  onClickLogsButton = () => {\r\n    this.props.toggleLogs(this.props.exploreId, this.props.showingLogs);\r\n  };\r\n\r\n  handleDedupStrategyChange = (dedupStrategy: LogsDedupStrategy) => {\r\n    this.props.changeDedupStrategy(this.props.exploreId, dedupStrategy);\r\n  };\r\n\r\n  hangleToggleLogLevel = (hiddenLogLevels: Set<LogLevel>) => {\r\n    const { exploreId } = this.props;\r\n    this.props.toggleLogLevelAction({\r\n      exploreId,\r\n      hiddenLogLevels,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      exploreId,\r\n      loading,\r\n      logsHighlighterExpressions,\r\n      logsResult,\r\n      dedupedResult,\r\n      onChangeTime,\r\n      onClickLabel,\r\n      onStartScanning,\r\n      onStopScanning,\r\n      range,\r\n      showingLogs,\r\n      scanning,\r\n      scanRange,\r\n      width,\r\n      hiddenLogLevels,\r\n    } = this.props;\r\n\r\n    return (\r\n      <Panel label=\"Logs\" loading={loading} isOpen={showingLogs} onToggle={this.onClickLogsButton}>\r\n        <Logs\r\n          dedupStrategy={this.props.dedupStrategy || LogsDedupStrategy.none}\r\n          data={logsResult}\r\n          dedupedData={dedupedResult}\r\n          exploreId={exploreId}\r\n          key={logsResult && logsResult.id}\r\n          highlighterExpressions={logsHighlighterExpressions}\r\n          loading={loading}\r\n          onChangeTime={onChangeTime}\r\n          onClickLabel={onClickLabel}\r\n          onStartScanning={onStartScanning}\r\n          onStopScanning={onStopScanning}\r\n          onDedupStrategyChange={this.handleDedupStrategyChange}\r\n          onToggleLogLevel={this.hangleToggleLogLevel}\r\n          range={range}\r\n          scanning={scanning}\r\n          scanRange={scanRange}\r\n          width={width}\r\n          hiddenLogLevels={hiddenLogLevels}\r\n        />\r\n      </Panel>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state: StoreState, { exploreId }) {\r\n  const explore = state.explore;\r\n  const item: ExploreItemState = explore[exploreId];\r\n  const { logsHighlighterExpressions, logsResult, queryTransactions, scanning, scanRange, range } = item;\r\n  const loading = queryTransactions.some(qt => qt.resultType === 'Logs' && !qt.done);\r\n  const { showingLogs, dedupStrategy } = exploreItemUIStateSelector(item);\r\n  const hiddenLogLevels = new Set(item.hiddenLogLevels);\r\n  const dedupedResult = deduplicatedLogsSelector(item);\r\n\r\n  return {\r\n    loading,\r\n    logsHighlighterExpressions,\r\n    logsResult,\r\n    scanning,\r\n    scanRange,\r\n    showingLogs,\r\n    range,\r\n    dedupStrategy,\r\n    hiddenLogLevels,\r\n    dedupedResult,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  toggleLogs,\r\n  changeDedupStrategy,\r\n  toggleLogLevelAction,\r\n};\r\n\r\nexport default hot(module)(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(LogsContainer)\r\n);\r\n","import React, { PureComponent } from 'react';\r\n\r\ninterface Props {\r\n  isOpen: boolean;\r\n  label: string;\r\n  loading?: boolean;\r\n  onToggle: (isOpen: boolean) => void;\r\n}\r\n\r\nexport default class Panel extends PureComponent<Props> {\r\n  onClickToggle = () => this.props.onToggle(!this.props.isOpen);\r\n\r\n  render() {\r\n    const { isOpen, loading } = this.props;\r\n    const iconClass = isOpen ? 'fa fa-caret-up' : 'fa fa-caret-down';\r\n    const loaderClass = loading ? 'explore-panel__loader explore-panel__loader--active' : 'explore-panel__loader';\r\n    return (\r\n      <div className=\"explore-panel panel-container\">\r\n        <div className=\"explore-panel__header\" onClick={this.onClickToggle}>\r\n          <div className=\"explore-panel__header-buttons\">\r\n            <span className={iconClass} />\r\n          </div>\r\n          <div className=\"explore-panel__header-label\">{this.props.label}</div>\r\n        </div>\r\n        {isOpen && (\r\n          <div className=\"explore-panel__body\">\r\n            <div className={loaderClass} />\r\n            {this.props.children}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// Libraries\r\nimport React, { PureComponent } from 'react';\r\n\r\n// Services\r\nimport { getAngularLoader, AngularComponent } from 'app/core/services/AngularLoader';\r\nimport { getTimeSrv } from 'app/features/dashboard/services/TimeSrv';\r\n\r\n// Types\r\nimport { Emitter } from 'app/core/utils/emitter';\r\nimport { RawTimeRange, DataQuery } from '@grafana/ui';\r\nimport 'app/features/plugins/plugin_loader';\r\n\r\ninterface QueryEditorProps {\r\n  datasource: any;\r\n  error?: string | JSX.Element;\r\n  onExecuteQuery?: () => void;\r\n  onQueryChange?: (value: DataQuery) => void;\r\n  initialQuery: DataQuery;\r\n  exploreEvents: Emitter;\r\n  range: RawTimeRange;\r\n}\r\n\r\nexport default class QueryEditor extends PureComponent<QueryEditorProps, any> {\r\n  element: any;\r\n  component: AngularComponent;\r\n\r\n  async componentDidMount() {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    const { datasource, initialQuery, exploreEvents, range } = this.props;\r\n    this.initTimeSrv(range);\r\n\r\n    const loader = getAngularLoader();\r\n    const template = '<plugin-component type=\"query-ctrl\"> </plugin-component>';\r\n    const target = { datasource: datasource.name, ...initialQuery };\r\n    const scopeProps = {\r\n      ctrl: {\r\n        datasource,\r\n        target,\r\n        refresh: () => {\r\n          this.props.onQueryChange(target);\r\n          this.props.onExecuteQuery();\r\n        },\r\n        onQueryChange: () => {\r\n          this.props.onQueryChange(target);\r\n        },\r\n        events: exploreEvents,\r\n        panel: { datasource, targets: [target] },\r\n        dashboard: {},\r\n      },\r\n    };\r\n\r\n    this.component = loader.load(this.element, scopeProps, template);\r\n    this.props.onQueryChange(target);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.component) {\r\n      this.component.destroy();\r\n    }\r\n  }\r\n\r\n  initTimeSrv(range) {\r\n    const timeSrv = getTimeSrv();\r\n    timeSrv.init({\r\n      time: range,\r\n      refresh: false,\r\n      getTimezone: () => 'utc',\r\n      timeRangeUpdated: () => console.log('refreshDashboard!'),\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return <div className=\"gf-form-query\" ref={element => (this.element = element)} style={{ width: '100%' }} />;\r\n  }\r\n}\r\n","// Libraries\r\nimport React, { PureComponent } from 'react';\r\nimport _ from 'lodash';\r\nimport { hot } from 'react-hot-loader';\r\nimport { connect } from 'react-redux';\r\n\r\n// Components\r\nimport QueryEditor from './QueryEditor';\r\nimport QueryTransactionStatus from './QueryTransactionStatus';\r\n\r\n// Actions\r\nimport { changeQuery, modifyQueries, runQueries, addQueryRow } from './state/actions';\r\n\r\n// Types\r\nimport { StoreState } from 'app/types';\r\nimport { RawTimeRange, DataQuery, ExploreDataSourceApi, QueryHint, QueryFixAction } from '@grafana/ui';\r\nimport { QueryTransaction, HistoryItem, ExploreItemState, ExploreId } from 'app/types/explore';\r\nimport { Emitter } from 'app/core/utils/emitter';\r\nimport { highlightLogsExpressionAction, removeQueryRowAction } from './state/actionTypes';\r\n\r\nfunction getFirstHintFromTransactions(transactions: QueryTransaction[]): QueryHint {\r\n  const transaction = transactions.find(qt => qt.hints && qt.hints.length > 0);\r\n  if (transaction) {\r\n    return transaction.hints[0];\r\n  }\r\n  return undefined;\r\n}\r\n\r\ninterface QueryRowProps {\r\n  addQueryRow: typeof addQueryRow;\r\n  changeQuery: typeof changeQuery;\r\n  className?: string;\r\n  exploreId: ExploreId;\r\n  datasourceInstance: ExploreDataSourceApi;\r\n  highlightLogsExpressionAction: typeof highlightLogsExpressionAction;\r\n  history: HistoryItem[];\r\n  index: number;\r\n  query: DataQuery;\r\n  modifyQueries: typeof modifyQueries;\r\n  queryTransactions: QueryTransaction[];\r\n  exploreEvents: Emitter;\r\n  range: RawTimeRange;\r\n  removeQueryRowAction: typeof removeQueryRowAction;\r\n  runQueries: typeof runQueries;\r\n}\r\n\r\nexport class QueryRow extends PureComponent<QueryRowProps> {\r\n  onExecuteQuery = () => {\r\n    const { exploreId } = this.props;\r\n    this.props.runQueries(exploreId);\r\n  };\r\n\r\n  onChangeQuery = (query: DataQuery, override?: boolean) => {\r\n    const { datasourceInstance, exploreId, index } = this.props;\r\n    this.props.changeQuery(exploreId, query, index, override);\r\n    if (query && !override && datasourceInstance.getHighlighterExpression && index === 0) {\r\n      // Live preview of log search matches. Only use on first row for now\r\n      this.updateLogsHighlights(query);\r\n    }\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    console.log('QueryRow will unmount');\r\n  }\r\n\r\n  onClickAddButton = () => {\r\n    const { exploreId, index } = this.props;\r\n    this.props.addQueryRow(exploreId, index);\r\n  };\r\n\r\n  onClickClearButton = () => {\r\n    this.onChangeQuery(null, true);\r\n  };\r\n\r\n  onClickHintFix = (action: QueryFixAction) => {\r\n    const { datasourceInstance, exploreId, index } = this.props;\r\n    if (datasourceInstance && datasourceInstance.modifyQuery) {\r\n      const modifier = (queries: DataQuery, action: QueryFixAction) => datasourceInstance.modifyQuery(queries, action);\r\n      this.props.modifyQueries(exploreId, action, index, modifier);\r\n    }\r\n  };\r\n\r\n  onClickRemoveButton = () => {\r\n    const { exploreId, index } = this.props;\r\n    this.props.removeQueryRowAction({ exploreId, index });\r\n  };\r\n\r\n  updateLogsHighlights = _.debounce((value: DataQuery) => {\r\n    const { datasourceInstance } = this.props;\r\n    if (datasourceInstance.getHighlighterExpression) {\r\n      const { exploreId } = this.props;\r\n      const expressions = [datasourceInstance.getHighlighterExpression(value)];\r\n      this.props.highlightLogsExpressionAction({ exploreId, expressions });\r\n    }\r\n  }, 500);\r\n\r\n  render() {\r\n    const { datasourceInstance, history, index, query, queryTransactions, exploreEvents, range } = this.props;\r\n    const transactions = queryTransactions.filter(t => t.rowIndex === index);\r\n    const transactionWithError = transactions.find(t => t.error !== undefined);\r\n    const hint = getFirstHintFromTransactions(transactions);\r\n    const queryError = transactionWithError ? transactionWithError.error : null;\r\n    const QueryField = datasourceInstance.pluginExports.ExploreQueryField;\r\n    return (\r\n      <div className=\"query-row\">\r\n        <div className=\"query-row-status\">\r\n          <QueryTransactionStatus transactions={transactions} />\r\n        </div>\r\n        <div className=\"query-row-field flex-shrink-1\">\r\n          {QueryField ? (\r\n            <QueryField\r\n              datasource={datasourceInstance}\r\n              query={query}\r\n              error={queryError}\r\n              hint={hint}\r\n              history={history}\r\n              onExecuteQuery={this.onExecuteQuery}\r\n              onExecuteHint={this.onClickHintFix}\r\n              onQueryChange={this.onChangeQuery}\r\n            />\r\n          ) : (\r\n            <QueryEditor\r\n              datasource={datasourceInstance}\r\n              error={queryError}\r\n              onQueryChange={this.onChangeQuery}\r\n              onExecuteQuery={this.onExecuteQuery}\r\n              initialQuery={query}\r\n              exploreEvents={exploreEvents}\r\n              range={range}\r\n            />\r\n          )}\r\n        </div>\r\n        <div className=\"gf-form-inline flex-shrink-0\">\r\n          <div className=\"gf-form\">\r\n            <button className=\"gf-form-label gf-form-label--btn\" onClick={this.onClickClearButton}>\r\n              <i className=\"fa fa-times\" />\r\n            </button>\r\n          </div>\r\n          <div className=\"gf-form\">\r\n            <button className=\"gf-form-label gf-form-label--btn\" onClick={this.onClickAddButton}>\r\n              <i className=\"fa fa-plus\" />\r\n            </button>\r\n          </div>\r\n          <div className=\"gf-form\">\r\n            <button className=\"gf-form-label gf-form-label--btn\" onClick={this.onClickRemoveButton}>\r\n              <i className=\"fa fa-minus\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state: StoreState, { exploreId, index }) {\r\n  const explore = state.explore;\r\n  const item: ExploreItemState = explore[exploreId];\r\n  const { datasourceInstance, history, queries, queryTransactions, range } = item;\r\n  const query = queries[index];\r\n  return { datasourceInstance, history, query, queryTransactions, range };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  addQueryRow,\r\n  changeQuery,\r\n  highlightLogsExpressionAction,\r\n  modifyQueries,\r\n  removeQueryRowAction,\r\n  runQueries,\r\n};\r\n\r\nexport default hot(module)(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(QueryRow)\r\n);\r\n","// Libraries\r\nimport React, { PureComponent } from 'react';\r\n\r\n// Components\r\nimport QueryRow from './QueryRow';\r\n\r\n// Types\r\nimport { Emitter } from 'app/core/utils/emitter';\r\nimport { ExploreId } from 'app/types/explore';\r\n\r\ninterface QueryRowsProps {\r\n  className?: string;\r\n  exploreEvents: Emitter;\r\n  exploreId: ExploreId;\r\n  queryKeys: string[];\r\n}\r\n\r\nexport default class QueryRows extends PureComponent<QueryRowsProps> {\r\n  render() {\r\n    const { className = '', exploreEvents, exploreId, queryKeys } = this.props;\r\n    return (\r\n      <div className={className}>\r\n        {queryKeys.map((key, index) => {\r\n          return <QueryRow key={key} exploreEvents={exploreEvents} exploreId={exploreId} index={index} />;\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { PureComponent } from 'react';\r\n\r\nimport { QueryTransaction } from 'app/types/explore';\r\nimport ElapsedTime from './ElapsedTime';\r\n\r\nfunction formatLatency(value) {\r\n  return `${(value / 1000).toFixed(1)}s`;\r\n}\r\n\r\ninterface QueryTransactionStatusItemProps {\r\n  transaction: QueryTransaction;\r\n}\r\n\r\nclass QueryTransactionStatusItem extends PureComponent<QueryTransactionStatusItemProps> {\r\n  render() {\r\n    const { transaction } = this.props;\r\n    const className = transaction.done ? 'query-transaction' : 'query-transaction query-transaction--loading';\r\n    return (\r\n      <div className={className}>\r\n        <div className=\"query-transaction__type\">{transaction.resultType}:</div>\r\n        <div className=\"query-transaction__duration\">\r\n          {transaction.done ? formatLatency(transaction.latency) : <ElapsedTime />}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\ninterface QueryTransactionStatusProps {\r\n  transactions: QueryTransaction[];\r\n}\r\n\r\nexport default class QueryTransactionStatus extends PureComponent<QueryTransactionStatusProps> {\r\n  render() {\r\n    const { transactions } = this.props;\r\n    return (\r\n      <div className=\"query-transactions\">\r\n        {transactions.map((t, i) => (\r\n          <QueryTransactionStatusItem key={`${t.rowIndex}:${t.resultType}`} transaction={t} />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import _ from 'lodash';\r\nimport React, { PureComponent } from 'react';\r\nimport ReactTable from 'react-table';\r\n\r\nimport TableModel from 'app/core/table_model';\r\n\r\nconst EMPTY_TABLE = new TableModel();\r\n// Identify columns that contain values\r\nconst VALUE_REGEX = /^[Vv]alue #\\d+/;\r\n\r\ninterface TableProps {\r\n  data: TableModel;\r\n  loading: boolean;\r\n  onClickCell?: (columnKey: string, rowValue: string) => void;\r\n}\r\n\r\nfunction prepareRows(rows, columnNames) {\r\n  return rows.map(cells => _.zipObject(columnNames, cells));\r\n}\r\n\r\nexport default class Table extends PureComponent<TableProps> {\r\n  getCellProps = (state, rowInfo, column) => {\r\n    return {\r\n      onClick: (e: React.SyntheticEvent) => {\r\n        // Only handle click on link, not the cell\r\n        if (e.target) {\r\n          const link = e.target as HTMLElement;\r\n          if (link.className === 'link') {\r\n            const columnKey = column.Header;\r\n            const rowValue = rowInfo.row[columnKey];\r\n            this.props.onClickCell(columnKey, rowValue);\r\n          }\r\n        }\r\n      },\r\n    };\r\n  };\r\n\r\n  render() {\r\n    const { data, loading } = this.props;\r\n    const tableModel = data || EMPTY_TABLE;\r\n    const columnNames = tableModel.columns.map(({ text }) => text);\r\n    const columns = tableModel.columns.map(({ filterable, text }) => ({\r\n      Header: text,\r\n      accessor: text,\r\n      className: VALUE_REGEX.test(text) ? 'text-right' : '',\r\n      show: text !== 'Time',\r\n      Cell: row => <span className={filterable ? 'link' : ''}>{row.value}</span>,\r\n    }));\r\n    const noDataText = data ? 'The queries returned no data for a table.' : '';\r\n\r\n    return (\r\n      <ReactTable\r\n        columns={columns}\r\n        data={tableModel.rows}\r\n        getTdProps={this.getCellProps}\r\n        loading={loading}\r\n        minRows={0}\r\n        noDataText={noDataText}\r\n        resolveData={data => prepareRows(data, columnNames)}\r\n        showPagination={Boolean(data)}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React, { PureComponent } from 'react';\r\nimport { hot } from 'react-hot-loader';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { ExploreId, ExploreItemState } from 'app/types/explore';\r\nimport { StoreState } from 'app/types';\r\n\r\nimport { toggleTable } from './state/actions';\r\nimport Table from './Table';\r\nimport Panel from './Panel';\r\nimport TableModel from 'app/core/table_model';\r\n\r\ninterface TableContainerProps {\r\n  exploreId: ExploreId;\r\n  loading: boolean;\r\n  onClickCell: (key: string, value: string) => void;\r\n  showingTable: boolean;\r\n  tableResult?: TableModel;\r\n  toggleTable: typeof toggleTable;\r\n}\r\n\r\nexport class TableContainer extends PureComponent<TableContainerProps> {\r\n  onClickTableButton = () => {\r\n    this.props.toggleTable(this.props.exploreId, this.props.showingTable);\r\n  };\r\n\r\n  render() {\r\n    const { loading, onClickCell, showingTable, tableResult } = this.props;\r\n\r\n    if (!tableResult) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <Panel label=\"Table\" loading={loading} isOpen={showingTable} onToggle={this.onClickTableButton}>\r\n        <Table data={tableResult} loading={loading} onClickCell={onClickCell} />\r\n      </Panel>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state: StoreState, { exploreId }) {\r\n  const explore = state.explore;\r\n  const item: ExploreItemState = explore[exploreId];\r\n  const { queryTransactions, showingTable, tableResult } = item;\r\n  const loading = queryTransactions.some(qt => qt.resultType === 'Table' && !qt.done);\r\n  return { loading, showingTable, tableResult };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  toggleTable,\r\n};\r\n\r\nexport default hot(module)(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(TableContainer)\r\n);\r\n","import React, { PureComponent } from 'react';\r\nimport moment from 'moment';\r\n\r\nimport * as dateMath from 'app/core/utils/datemath';\r\nimport * as rangeUtil from 'app/core/utils/rangeutil';\r\nimport { RawTimeRange, TimeRange } from '@grafana/ui';\r\n\r\nconst DATE_FORMAT = 'YYYY-MM-DD HH:mm:ss';\r\nexport const DEFAULT_RANGE = {\r\n  from: 'now-6h',\r\n  to: 'now',\r\n};\r\n\r\n/**\r\n * Return a human-editable string of either relative (inludes \"now\") or absolute local time (in the shape of DATE_FORMAT).\r\n * @param value Epoch or relative time\r\n */\r\nexport function parseTime(value: string | moment.Moment, isUtc = false, ensureString = false): string | moment.Moment {\r\n  if (moment.isMoment(value)) {\r\n    if (ensureString) {\r\n      return value.format(DATE_FORMAT);\r\n    }\r\n    return value;\r\n  }\r\n  if ((value as string).indexOf('now') !== -1) {\r\n    return value;\r\n  }\r\n  let time: any = value;\r\n  // Possible epoch\r\n  if (!isNaN(time)) {\r\n    time = parseInt(time, 10);\r\n  }\r\n  time = isUtc ? moment.utc(time) : moment(time);\r\n  return time.format(DATE_FORMAT);\r\n}\r\n\r\ninterface TimePickerProps {\r\n  isOpen?: boolean;\r\n  isUtc?: boolean;\r\n  range?: RawTimeRange;\r\n  onChangeTime?: (range: RawTimeRange, scanning?: boolean) => void;\r\n}\r\n\r\ninterface TimePickerState {\r\n  isOpen: boolean;\r\n  isUtc: boolean;\r\n  rangeString: string;\r\n  refreshInterval?: string;\r\n  initialRange?: RawTimeRange;\r\n\r\n  // Input-controlled text, keep these in a shape that is human-editable\r\n  fromRaw: string;\r\n  toRaw: string;\r\n}\r\n\r\n/**\r\n * TimePicker with dropdown menu for relative dates.\r\n *\r\n * Initialize with a range that is either based on relative time strings,\r\n * or on Moment objects.\r\n * Internally the component needs to keep a string representation in `fromRaw`\r\n * and `toRaw` for the controlled inputs.\r\n * When a time is picked, `onChangeTime` is called with the new range that\r\n * is again based on relative time strings or Moment objects.\r\n */\r\nexport default class TimePicker extends PureComponent<TimePickerProps, TimePickerState> {\r\n  dropdownEl: any;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isOpen: props.isOpen,\r\n      isUtc: props.isUtc,\r\n      rangeString: '',\r\n      fromRaw: '',\r\n      toRaw: '',\r\n      initialRange: DEFAULT_RANGE,\r\n      refreshInterval: '',\r\n    };\r\n  } //Temp solution... How do detect if ds supports table format?\r\n\r\n  static getDerivedStateFromProps(props, state) {\r\n    if (state.initialRange && state.initialRange === props.range) {\r\n      return state;\r\n    }\r\n\r\n    const from = props.range ? props.range.from : DEFAULT_RANGE.from;\r\n    const to = props.range ? props.range.to : DEFAULT_RANGE.to;\r\n\r\n    // Ensure internal string format\r\n    const fromRaw = parseTime(from, props.isUtc, true);\r\n    const toRaw = parseTime(to, props.isUtc, true);\r\n    const range = {\r\n      from: fromRaw,\r\n      to: toRaw,\r\n    };\r\n\r\n    return {\r\n      ...state,\r\n      fromRaw,\r\n      toRaw,\r\n      initialRange: props.range,\r\n      rangeString: rangeUtil.describeTimeRange(range),\r\n    };\r\n  }\r\n\r\n  move(direction: number, scanning?: boolean): RawTimeRange {\r\n    const { onChangeTime } = this.props;\r\n    const { fromRaw, toRaw } = this.state;\r\n    const from = dateMath.parse(fromRaw, false);\r\n    const to = dateMath.parse(toRaw, true);\r\n    const step = scanning ? 1 : 2;\r\n    const timespan = (to.valueOf() - from.valueOf()) / step;\r\n\r\n    let nextTo, nextFrom;\r\n    if (direction === -1) {\r\n      nextTo = to.valueOf() - timespan;\r\n      nextFrom = from.valueOf() - timespan;\r\n    } else if (direction === 1) {\r\n      nextTo = to.valueOf() + timespan;\r\n      nextFrom = from.valueOf() + timespan;\r\n      if (nextTo > Date.now() && to < Date.now()) {\r\n        nextTo = Date.now();\r\n        nextFrom = from.valueOf();\r\n      }\r\n    } else {\r\n      nextTo = to.valueOf();\r\n      nextFrom = from.valueOf();\r\n    }\r\n\r\n    const nextRange = {\r\n      from: moment(nextFrom),\r\n      to: moment(nextTo),\r\n    };\r\n\r\n    const nextTimeRange: TimeRange = {\r\n      raw: nextRange,\r\n      from: nextRange.from,\r\n      to: nextRange.to,\r\n    };\r\n\r\n    this.setState(\r\n      {\r\n        rangeString: rangeUtil.describeTimeRange(nextRange),\r\n        fromRaw: nextRange.from.format(DATE_FORMAT),\r\n        toRaw: nextRange.to.format(DATE_FORMAT),\r\n      },\r\n      () => {\r\n        onChangeTime(nextTimeRange, scanning);\r\n      }\r\n    );\r\n\r\n    return nextRange;\r\n  }\r\n\r\n  handleChangeFrom = e => {\r\n    this.setState({\r\n      fromRaw: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleChangeTo = e => {\r\n    this.setState({\r\n      toRaw: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleClickApply = () => {\r\n    const { onChangeTime } = this.props;\r\n    let range;\r\n    this.setState(\r\n      state => {\r\n        const { toRaw, fromRaw } = this.state;\r\n        range = {\r\n          from: dateMath.parse(fromRaw, false),\r\n          to: dateMath.parse(toRaw, true),\r\n        };\r\n        const rangeString = rangeUtil.describeTimeRange(range);\r\n        return {\r\n          isOpen: false,\r\n          rangeString,\r\n        };\r\n      },\r\n      () => {\r\n        if (onChangeTime) {\r\n          onChangeTime(range);\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  handleClickLeft = () => this.move(-1);\r\n  handleClickPicker = () => {\r\n    this.setState(state => ({\r\n      isOpen: !state.isOpen,\r\n    }));\r\n  };\r\n  handleClickRight = () => this.move(1);\r\n  handleClickRefresh = () => {};\r\n  handleClickRelativeOption = range => {\r\n    const { onChangeTime } = this.props;\r\n    const rangeString = rangeUtil.describeTimeRange(range);\r\n    this.setState(\r\n      {\r\n        toRaw: range.to,\r\n        fromRaw: range.from,\r\n        isOpen: false,\r\n        rangeString,\r\n      },\r\n      () => {\r\n        if (onChangeTime) {\r\n          onChangeTime(range);\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  getTimeOptions() {\r\n    return rangeUtil.getRelativeTimesList({}, this.state.rangeString);\r\n  }\r\n\r\n  dropdownRef = el => {\r\n    this.dropdownEl = el;\r\n  };\r\n\r\n  renderDropdown() {\r\n    const { fromRaw, isOpen, toRaw } = this.state;\r\n    if (!isOpen) {\r\n      return null;\r\n    }\r\n    const timeOptions = this.getTimeOptions();\r\n    return (\r\n      <div ref={this.dropdownRef} className=\"gf-timepicker-dropdown\">\r\n        <div className=\"popover-box\">\r\n          <div className=\"popover-box__header\">\r\n            <span className=\"popover-box__title\">Quick ranges</span>\r\n          </div>\r\n          <div className=\"popover-box__body gf-timepicker-relative-section\">\r\n            {Object.keys(timeOptions).map(section => {\r\n              const group = timeOptions[section];\r\n              return (\r\n                <ul key={section}>\r\n                  {group.map(option => (\r\n                    <li className={option.active ? 'active' : ''} key={option.display}>\r\n                      <a onClick={() => this.handleClickRelativeOption(option)}>{option.display}</a>\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"popover-box\">\r\n          <div className=\"popover-box__header\">\r\n            <span className=\"popover-box__title\">Custom range</span>\r\n          </div>\r\n          <div className=\"popover-box__body gf-timepicker-absolute-section\">\r\n            <label className=\"small\">From:</label>\r\n            <div className=\"gf-form-inline\">\r\n              <div className=\"gf-form max-width-28\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"gf-form-input input-large timepicker-from\"\r\n                  value={fromRaw}\r\n                  onChange={this.handleChangeFrom}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <label className=\"small\">To:</label>\r\n            <div className=\"gf-form-inline\">\r\n              <div className=\"gf-form max-width-28\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"gf-form-input input-large timepicker-to\"\r\n                  value={toRaw}\r\n                  onChange={this.handleChangeTo}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"gf-form\">\r\n              <button className=\"btn gf-form-btn btn-secondary\" onClick={this.handleClickApply}>\r\n                Apply\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { isUtc, rangeString, refreshInterval } = this.state;\r\n\r\n    return (\r\n      <div className=\"timepicker\">\r\n        <div className=\"navbar-buttons\">\r\n          <button className=\"btn navbar-button navbar-button--tight timepicker-left\" onClick={this.handleClickLeft}>\r\n            <i className=\"fa fa-chevron-left\" />\r\n          </button>\r\n          <button className=\"btn navbar-button gf-timepicker-nav-btn\" onClick={this.handleClickPicker}>\r\n            <i className=\"fa fa-clock-o\" />\r\n            <span className=\"timepicker-rangestring\">{rangeString}</span>\r\n            {isUtc ? <span className=\"gf-timepicker-utc\">UTC</span> : null}\r\n            {refreshInterval ? <span className=\"text-warning\">&nbsp; Refresh every {refreshInterval}</span> : null}\r\n          </button>\r\n          <button className=\"btn navbar-button navbar-button--tight timepicker-right\" onClick={this.handleClickRight}>\r\n            <i className=\"fa fa-chevron-right\" />\r\n          </button>\r\n        </div>\r\n        {this.renderDropdown()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { hot } from 'react-hot-loader';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { updateLocation } from 'app/core/actions';\r\nimport { StoreState } from 'app/types';\r\nimport { ExploreId, ExploreUrlState } from 'app/types/explore';\r\nimport { parseUrlState } from 'app/core/utils/explore';\r\n\r\nimport ErrorBoundary from './ErrorBoundary';\r\nimport Explore from './Explore';\r\nimport { CustomScrollbar } from '@grafana/ui';\r\nimport { initializeExploreSplitAction, resetExploreAction } from './state/actionTypes';\r\n\r\ninterface WrapperProps {\r\n  initializeExploreSplitAction: typeof initializeExploreSplitAction;\r\n  split: boolean;\r\n  updateLocation: typeof updateLocation;\r\n  resetExploreAction: typeof resetExploreAction;\r\n  urlStates: { [key: string]: string };\r\n}\r\n\r\nexport class Wrapper extends Component<WrapperProps> {\r\n  initialSplit: boolean;\r\n  urlStates: { [key: string]: ExploreUrlState };\r\n\r\n  constructor(props: WrapperProps) {\r\n    super(props);\r\n    this.urlStates = {};\r\n    const { left, right } = props.urlStates;\r\n    if (props.urlStates.left) {\r\n      this.urlStates.leftState = parseUrlState(left);\r\n    }\r\n    if (props.urlStates.right) {\r\n      this.urlStates.rightState = parseUrlState(right);\r\n      this.initialSplit = true;\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.initialSplit) {\r\n      this.props.initializeExploreSplitAction();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.resetExploreAction();\r\n  }\r\n\r\n  render() {\r\n    const { split } = this.props;\r\n    const { leftState, rightState } = this.urlStates;\r\n\r\n    return (\r\n      <div className=\"page-scrollbar-wrapper\">\r\n        <CustomScrollbar autoHeightMin={'100%'}>\r\n          <div className=\"explore-wrapper\">\r\n            <ErrorBoundary>\r\n              <Explore exploreId={ExploreId.left} urlState={leftState} />\r\n            </ErrorBoundary>\r\n            {split && (\r\n              <ErrorBoundary>\r\n                <Explore exploreId={ExploreId.right} urlState={rightState} />\r\n              </ErrorBoundary>\r\n            )}\r\n          </div>\r\n        </CustomScrollbar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: StoreState) => {\r\n  const urlStates = state.location.query;\r\n  const { split } = state.explore;\r\n  return { split, urlStates };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  initializeExploreSplitAction,\r\n  updateLocation,\r\n  resetExploreAction,\r\n};\r\n\r\nexport default hot(module)(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(Wrapper)\r\n);\r\n","// Libraries\r\nimport _ from 'lodash';\r\nimport { ThunkAction } from 'redux-thunk';\r\n\r\n// Services & Utils\r\nimport store from 'app/core/store';\r\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\r\nimport { Emitter } from 'app/core/core';\r\nimport {\r\n  LAST_USED_DATASOURCE_KEY,\r\n  clearQueryKeys,\r\n  ensureQueries,\r\n  generateEmptyQuery,\r\n  hasNonEmptyQuery,\r\n  makeTimeSeriesList,\r\n  updateHistory,\r\n  buildQueryTransaction,\r\n  serializeStateToUrlParam,\r\n} from 'app/core/utils/explore';\r\n\r\n// Actions\r\nimport { updateLocation } from 'app/core/actions';\r\n\r\n// Types\r\nimport { StoreState } from 'app/types';\r\nimport {\r\n  RawTimeRange,\r\n  TimeRange,\r\n  DataSourceApi,\r\n  DataQuery,\r\n  DataSourceSelectItem,\r\n  QueryHint,\r\n  QueryFixAction,\r\n} from '@grafana/ui/src/types';\r\nimport { ExploreId, ExploreUrlState, RangeScanner, ResultType, QueryOptions, ExploreUIState } from 'app/types/explore';\r\nimport {\r\n  Action,\r\n  updateDatasourceInstanceAction,\r\n  changeQueryAction,\r\n  changeSizeAction,\r\n  ChangeSizePayload,\r\n  changeTimeAction,\r\n  scanStopAction,\r\n  clearQueriesAction,\r\n  initializeExploreAction,\r\n  loadDatasourceMissingAction,\r\n  loadDatasourceFailureAction,\r\n  loadDatasourcePendingAction,\r\n  queriesImportedAction,\r\n  LoadDatasourceSuccessPayload,\r\n  loadDatasourceSuccessAction,\r\n  modifyQueriesAction,\r\n  queryTransactionFailureAction,\r\n  queryTransactionStartAction,\r\n  queryTransactionSuccessAction,\r\n  scanRangeAction,\r\n  runQueriesEmptyAction,\r\n  scanStartAction,\r\n  setQueriesAction,\r\n  splitCloseAction,\r\n  splitOpenAction,\r\n  addQueryRowAction,\r\n  AddQueryRowPayload,\r\n  toggleGraphAction,\r\n  toggleLogsAction,\r\n  toggleTableAction,\r\n  ToggleGraphPayload,\r\n  ToggleLogsPayload,\r\n  ToggleTablePayload,\r\n  updateUIStateAction,\r\n} from './actionTypes';\r\nimport { ActionOf, ActionCreator } from 'app/core/redux/actionCreatorFactory';\r\nimport { LogsDedupStrategy } from 'app/core/logs_model';\r\n\r\ntype ThunkResult<R> = ThunkAction<R, StoreState, undefined, Action>;\r\n\r\n/**\r\n * Updates UI state and save it to the URL\r\n */\r\nconst updateExploreUIState = (exploreId, uiStateFragment: Partial<ExploreUIState>) => {\r\n  return dispatch => {\r\n    dispatch(updateUIStateAction({ exploreId, ...uiStateFragment }));\r\n    dispatch(stateSave());\r\n  };\r\n};\r\n\r\n/**\r\n * Adds a query row after the row with the given index.\r\n */\r\nexport function addQueryRow(exploreId: ExploreId, index: number): ActionOf<AddQueryRowPayload> {\r\n  const query = generateEmptyQuery(index + 1);\r\n  return addQueryRowAction({ exploreId, index, query });\r\n}\r\n\r\n/**\r\n * Loads a new datasource identified by the given name.\r\n */\r\nexport function changeDatasource(exploreId: ExploreId, datasource: string): ThunkResult<void> {\r\n  return async (dispatch, getState) => {\r\n    const newDataSourceInstance = await getDatasourceSrv().get(datasource);\r\n    const currentDataSourceInstance = getState().explore[exploreId].datasourceInstance;\r\n    const queries = getState().explore[exploreId].queries;\r\n\r\n    await dispatch(importQueries(exploreId, queries, currentDataSourceInstance, newDataSourceInstance));\r\n\r\n    dispatch(updateDatasourceInstanceAction({ exploreId, datasourceInstance: newDataSourceInstance }));\r\n\r\n    try {\r\n      await dispatch(loadDatasource(exploreId, newDataSourceInstance));\r\n    } catch (error) {\r\n      console.error(error);\r\n      return;\r\n    }\r\n\r\n    dispatch(runQueries(exploreId));\r\n  };\r\n}\r\n\r\n/**\r\n * Query change handler for the query row with the given index.\r\n * If `override` is reset the query modifications and run the queries. Use this to set queries via a link.\r\n */\r\nexport function changeQuery(\r\n  exploreId: ExploreId,\r\n  query: DataQuery,\r\n  index: number,\r\n  override: boolean\r\n): ThunkResult<void> {\r\n  return dispatch => {\r\n    // Null query means reset\r\n    if (query === null) {\r\n      query = { ...generateEmptyQuery(index) };\r\n    }\r\n\r\n    dispatch(changeQueryAction({ exploreId, query, index, override }));\r\n    if (override) {\r\n      dispatch(runQueries(exploreId));\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Keep track of the Explore container size, in particular the width.\r\n * The width will be used to calculate graph intervals (number of datapoints).\r\n */\r\nexport function changeSize(\r\n  exploreId: ExploreId,\r\n  { height, width }: { height: number; width: number }\r\n): ActionOf<ChangeSizePayload> {\r\n  return changeSizeAction({ exploreId, height, width });\r\n}\r\n\r\n/**\r\n * Change the time range of Explore. Usually called from the Timepicker or a graph interaction.\r\n */\r\nexport function changeTime(exploreId: ExploreId, range: TimeRange): ThunkResult<void> {\r\n  return dispatch => {\r\n    dispatch(changeTimeAction({ exploreId, range }));\r\n    dispatch(runQueries(exploreId));\r\n  };\r\n}\r\n\r\n/**\r\n * Clear all queries and results.\r\n */\r\nexport function clearQueries(exploreId: ExploreId): ThunkResult<void> {\r\n  return dispatch => {\r\n    dispatch(scanStopAction({ exploreId }));\r\n    dispatch(clearQueriesAction({ exploreId }));\r\n    dispatch(stateSave());\r\n  };\r\n}\r\n\r\n/**\r\n * Initialize Explore state with state from the URL and the React component.\r\n * Call this only on components for with the Explore state has not been initialized.\r\n */\r\nexport function initializeExplore(\r\n  exploreId: ExploreId,\r\n  datasourceName: string,\r\n  queries: DataQuery[],\r\n  range: RawTimeRange,\r\n  containerWidth: number,\r\n  eventBridge: Emitter,\r\n  ui: ExploreUIState\r\n): ThunkResult<void> {\r\n  return async dispatch => {\r\n    const exploreDatasources: DataSourceSelectItem[] = getDatasourceSrv()\r\n      .getExternal()\r\n      .map(ds => ({\r\n        value: ds.name,\r\n        name: ds.name,\r\n        meta: ds.meta,\r\n      }));\r\n\r\n    dispatch(\r\n      initializeExploreAction({\r\n        exploreId,\r\n        containerWidth,\r\n        eventBridge,\r\n        exploreDatasources,\r\n        queries,\r\n        range,\r\n        ui,\r\n      })\r\n    );\r\n\r\n    if (exploreDatasources.length >= 1) {\r\n      let instance;\r\n\r\n      if (datasourceName) {\r\n        try {\r\n          instance = await getDatasourceSrv().get(datasourceName);\r\n        } catch (error) {\r\n          console.error(error);\r\n        }\r\n      }\r\n      // Checking on instance here because requested datasource could be deleted already\r\n      if (!instance) {\r\n        instance = await getDatasourceSrv().get();\r\n      }\r\n\r\n      dispatch(updateDatasourceInstanceAction({ exploreId, datasourceInstance: instance }));\r\n\r\n      try {\r\n        await dispatch(loadDatasource(exploreId, instance));\r\n      } catch (error) {\r\n        console.error(error);\r\n        return;\r\n      }\r\n      dispatch(runQueries(exploreId, true));\r\n    } else {\r\n      dispatch(loadDatasourceMissingAction({ exploreId }));\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Datasource loading was successfully completed. The instance is stored in the state as well in case we need to\r\n * run datasource-specific code. Existing queries are imported to the new datasource if an importer exists,\r\n * e.g., Prometheus -> Loki queries.\r\n */\r\nexport const loadDatasourceSuccess = (exploreId: ExploreId, instance: any): ActionOf<LoadDatasourceSuccessPayload> => {\r\n  // Capabilities\r\n  const supportsGraph = instance.meta.metrics;\r\n  const supportsLogs = instance.meta.logs;\r\n  const supportsTable = instance.meta.tables;\r\n  // Custom components\r\n  const StartPage = instance.pluginExports.ExploreStartPage;\r\n\r\n  const historyKey = `grafana.explore.history.${instance.meta.id}`;\r\n  const history = store.getObject(historyKey, []);\r\n  // Save last-used datasource\r\n  store.set(LAST_USED_DATASOURCE_KEY, instance.name);\r\n\r\n  return loadDatasourceSuccessAction({\r\n    exploreId,\r\n    StartPage,\r\n    datasourceInstance: instance,\r\n    history,\r\n    showingStartPage: Boolean(StartPage),\r\n    supportsGraph,\r\n    supportsLogs,\r\n    supportsTable,\r\n  });\r\n};\r\n\r\nexport function importQueries(\r\n  exploreId: ExploreId,\r\n  queries: DataQuery[],\r\n  sourceDataSource: DataSourceApi,\r\n  targetDataSource: DataSourceApi\r\n) {\r\n  return async dispatch => {\r\n    let importedQueries = queries;\r\n    // Check if queries can be imported from previously selected datasource\r\n    if (sourceDataSource.meta.id === targetDataSource.meta.id) {\r\n      // Keep same queries if same type of datasource\r\n      importedQueries = [...queries];\r\n    } else if (targetDataSource.importQueries) {\r\n      // Datasource-specific importers\r\n      importedQueries = await targetDataSource.importQueries(queries, sourceDataSource.meta);\r\n    } else {\r\n      // Default is blank queries\r\n      importedQueries = ensureQueries();\r\n    }\r\n\r\n    const nextQueries = importedQueries.map((q, i) => ({\r\n      ...q,\r\n      ...generateEmptyQuery(i),\r\n    }));\r\n\r\n    dispatch(queriesImportedAction({ exploreId, queries: nextQueries }));\r\n  };\r\n}\r\n\r\n/**\r\n * Main action to asynchronously load a datasource. Dispatches lots of smaller actions for feedback.\r\n */\r\nexport function loadDatasource(exploreId: ExploreId, instance: DataSourceApi): ThunkResult<void> {\r\n  return async (dispatch, getState) => {\r\n    const datasourceName = instance.name;\r\n\r\n    // Keep ID to track selection\r\n    dispatch(loadDatasourcePendingAction({ exploreId, requestedDatasourceName: datasourceName }));\r\n    let datasourceError = null;\r\n\r\n    try {\r\n      const testResult = await instance.testDatasource();\r\n      datasourceError = testResult.status === 'success' ? null : testResult.message;\r\n    } catch (error) {\r\n      datasourceError = (error && error.statusText) || 'Network error';\r\n    }\r\n\r\n    if (datasourceError) {\r\n      dispatch(loadDatasourceFailureAction({ exploreId, error: datasourceError }));\r\n      return Promise.reject(`${datasourceName} loading failed`);\r\n    }\r\n\r\n    if (datasourceName !== getState().explore[exploreId].requestedDatasourceName) {\r\n      // User already changed datasource again, discard results\r\n      return;\r\n    }\r\n\r\n    if (instance.init) {\r\n      instance.init();\r\n    }\r\n\r\n    if (datasourceName !== getState().explore[exploreId].requestedDatasourceName) {\r\n      // User already changed datasource again, discard results\r\n      return;\r\n    }\r\n\r\n    dispatch(loadDatasourceSuccess(exploreId, instance));\r\n    return Promise.resolve();\r\n  };\r\n}\r\n\r\n/**\r\n * Action to modify a query given a datasource-specific modifier action.\r\n * @param exploreId Explore area\r\n * @param modification Action object with a type, e.g., ADD_FILTER\r\n * @param index Optional query row index. If omitted, the modification is applied to all query rows.\r\n * @param modifier Function that executes the modification, typically `datasourceInstance.modifyQueries`.\r\n */\r\nexport function modifyQueries(\r\n  exploreId: ExploreId,\r\n  modification: QueryFixAction,\r\n  index: number,\r\n  modifier: any\r\n): ThunkResult<void> {\r\n  return dispatch => {\r\n    dispatch(modifyQueriesAction({ exploreId, modification, index, modifier }));\r\n    if (!modification.preventSubmit) {\r\n      dispatch(runQueries(exploreId));\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Mark a query transaction as failed with an error extracted from the query response.\r\n * The transaction will be marked as `done`.\r\n */\r\nexport function queryTransactionFailure(\r\n  exploreId: ExploreId,\r\n  transactionId: string,\r\n  response: any,\r\n  datasourceId: string\r\n): ThunkResult<void> {\r\n  return (dispatch, getState) => {\r\n    const { datasourceInstance, queryTransactions } = getState().explore[exploreId];\r\n    if (datasourceInstance.meta.id !== datasourceId || response.cancelled) {\r\n      // Navigated away, queries did not matter\r\n      return;\r\n    }\r\n\r\n    // Transaction might have been discarded\r\n    if (!queryTransactions.find(qt => qt.id === transactionId)) {\r\n      return;\r\n    }\r\n\r\n    console.error(response);\r\n\r\n    let error: string;\r\n    let errorDetails: string;\r\n    if (response.data) {\r\n      if (typeof response.data === 'string') {\r\n        error = response.data;\r\n      } else if (response.data.error) {\r\n        error = response.data.error;\r\n        if (response.data.response) {\r\n          errorDetails = response.data.response;\r\n        }\r\n      } else {\r\n        throw new Error('Could not handle error response');\r\n      }\r\n    } else if (response.message) {\r\n      error = response.message;\r\n    } else if (typeof response === 'string') {\r\n      error = response;\r\n    } else {\r\n      error = 'Unknown error during query transaction. Please check JS console logs.';\r\n    }\r\n\r\n    // Mark transactions as complete\r\n    const nextQueryTransactions = queryTransactions.map(qt => {\r\n      if (qt.id === transactionId) {\r\n        return {\r\n          ...qt,\r\n          error,\r\n          errorDetails,\r\n          done: true,\r\n        };\r\n      }\r\n      return qt;\r\n    });\r\n\r\n    dispatch(queryTransactionFailureAction({ exploreId, queryTransactions: nextQueryTransactions }));\r\n  };\r\n}\r\n\r\n/**\r\n * Complete a query transaction, mark the transaction as `done` and store query state in URL.\r\n * If the transaction was started by a scanner, it keeps on scanning for more results.\r\n * Side-effect: the query is stored in localStorage.\r\n * @param exploreId Explore area\r\n * @param transactionId ID\r\n * @param result Response from `datasourceInstance.query()`\r\n * @param latency Duration between request and response\r\n * @param queries Queries from all query rows\r\n * @param datasourceId Origin datasource instance, used to discard results if current datasource is different\r\n */\r\nexport function queryTransactionSuccess(\r\n  exploreId: ExploreId,\r\n  transactionId: string,\r\n  result: any,\r\n  latency: number,\r\n  queries: DataQuery[],\r\n  datasourceId: string\r\n): ThunkResult<void> {\r\n  return (dispatch, getState) => {\r\n    const { datasourceInstance, history, queryTransactions, scanner, scanning } = getState().explore[exploreId];\r\n\r\n    // If datasource already changed, results do not matter\r\n    if (datasourceInstance.meta.id !== datasourceId) {\r\n      return;\r\n    }\r\n\r\n    // Transaction might have been discarded\r\n    const transaction = queryTransactions.find(qt => qt.id === transactionId);\r\n    if (!transaction) {\r\n      return;\r\n    }\r\n\r\n    // Get query hints\r\n    let hints: QueryHint[];\r\n    if (datasourceInstance.getQueryHints) {\r\n      hints = datasourceInstance.getQueryHints(transaction.query, result);\r\n    }\r\n\r\n    // Mark transactions as complete and attach result\r\n    const nextQueryTransactions = queryTransactions.map(qt => {\r\n      if (qt.id === transactionId) {\r\n        return {\r\n          ...qt,\r\n          hints,\r\n          latency,\r\n          result,\r\n          done: true,\r\n        };\r\n      }\r\n      return qt;\r\n    });\r\n\r\n    // Side-effect: Saving history in localstorage\r\n    const nextHistory = updateHistory(history, datasourceId, queries);\r\n\r\n    dispatch(\r\n      queryTransactionSuccessAction({\r\n        exploreId,\r\n        history: nextHistory,\r\n        queryTransactions: nextQueryTransactions,\r\n      })\r\n    );\r\n\r\n    // Keep scanning for results if this was the last scanning transaction\r\n    if (scanning) {\r\n      if (_.size(result) === 0) {\r\n        const other = nextQueryTransactions.find(qt => qt.scanning && !qt.done);\r\n        if (!other) {\r\n          const range = scanner();\r\n          dispatch(scanRangeAction({ exploreId, range }));\r\n        }\r\n      } else {\r\n        // We can stop scanning if we have a result\r\n        dispatch(scanStopAction({ exploreId }));\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Main action to run queries and dispatches sub-actions based on which result viewers are active\r\n */\r\nexport function runQueries(exploreId: ExploreId, ignoreUIState = false) {\r\n  return (dispatch, getState) => {\r\n    const {\r\n      datasourceInstance,\r\n      queries,\r\n      showingLogs,\r\n      showingGraph,\r\n      showingTable,\r\n      supportsGraph,\r\n      supportsLogs,\r\n      supportsTable,\r\n    } = getState().explore[exploreId];\r\n\r\n    if (!hasNonEmptyQuery(queries)) {\r\n      dispatch(runQueriesEmptyAction({ exploreId }));\r\n      dispatch(stateSave()); // Remember to saves to state and update location\r\n      return;\r\n    }\r\n\r\n    // Some datasource's query builders allow per-query interval limits,\r\n    // but we're using the datasource interval limit for now\r\n    const interval = datasourceInstance.interval;\r\n\r\n    // Keep table queries first since they need to return quickly\r\n    if ((ignoreUIState || showingTable) && supportsTable) {\r\n      dispatch(\r\n        runQueriesForType(\r\n          exploreId,\r\n          'Table',\r\n          {\r\n            interval,\r\n            format: 'table',\r\n            instant: true,\r\n            valueWithRefId: true,\r\n          },\r\n          data => data[0]\r\n        )\r\n      );\r\n    }\r\n    if ((ignoreUIState || showingGraph) && supportsGraph) {\r\n      dispatch(\r\n        runQueriesForType(\r\n          exploreId,\r\n          'Graph',\r\n          {\r\n            interval,\r\n            format: 'time_series',\r\n            instant: false,\r\n          },\r\n          makeTimeSeriesList\r\n        )\r\n      );\r\n    }\r\n    if ((ignoreUIState || showingLogs) && supportsLogs) {\r\n      dispatch(runQueriesForType(exploreId, 'Logs', { interval, format: 'logs' }));\r\n    }\r\n\r\n    dispatch(stateSave());\r\n  };\r\n}\r\n\r\n/**\r\n * Helper action to build a query transaction object and handing the query to the datasource.\r\n * @param exploreId Explore area\r\n * @param resultType Result viewer that will be associated with this query result\r\n * @param queryOptions Query options as required by the datasource's `query()` function.\r\n * @param resultGetter Optional result extractor, e.g., if the result is a list and you only need the first element.\r\n */\r\nfunction runQueriesForType(\r\n  exploreId: ExploreId,\r\n  resultType: ResultType,\r\n  queryOptions: QueryOptions,\r\n  resultGetter?: any\r\n) {\r\n  return async (dispatch, getState) => {\r\n    const { datasourceInstance, eventBridge, queries, queryIntervals, range, scanning } = getState().explore[exploreId];\r\n    const datasourceId = datasourceInstance.meta.id;\r\n\r\n    // Run all queries concurrently\r\n    queries.forEach(async (query, rowIndex) => {\r\n      const transaction = buildQueryTransaction(\r\n        query,\r\n        rowIndex,\r\n        resultType,\r\n        queryOptions,\r\n        range,\r\n        queryIntervals,\r\n        scanning\r\n      );\r\n      dispatch(queryTransactionStartAction({ exploreId, resultType, rowIndex, transaction }));\r\n      try {\r\n        const now = Date.now();\r\n        const res = await datasourceInstance.query(transaction.options);\r\n        eventBridge.emit('data-received', res.data || []);\r\n        const latency = Date.now() - now;\r\n        const results = resultGetter ? resultGetter(res.data) : res.data;\r\n        dispatch(queryTransactionSuccess(exploreId, transaction.id, results, latency, queries, datasourceId));\r\n      } catch (response) {\r\n        eventBridge.emit('data-error', response);\r\n        dispatch(queryTransactionFailure(exploreId, transaction.id, response, datasourceId));\r\n      }\r\n    });\r\n  };\r\n}\r\n\r\n/**\r\n * Start a scan for more results using the given scanner.\r\n * @param exploreId Explore area\r\n * @param scanner Function that a) returns a new time range and b) triggers a query run for the new range\r\n */\r\nexport function scanStart(exploreId: ExploreId, scanner: RangeScanner): ThunkResult<void> {\r\n  return dispatch => {\r\n    // Register the scanner\r\n    dispatch(scanStartAction({ exploreId, scanner }));\r\n    // Scanning must trigger query run, and return the new range\r\n    const range = scanner();\r\n    // Set the new range to be displayed\r\n    dispatch(scanRangeAction({ exploreId, range }));\r\n  };\r\n}\r\n\r\n/**\r\n * Reset queries to the given queries. Any modifications will be discarded.\r\n * Use this action for clicks on query examples. Triggers a query run.\r\n */\r\nexport function setQueries(exploreId: ExploreId, rawQueries: DataQuery[]): ThunkResult<void> {\r\n  return dispatch => {\r\n    // Inject react keys into query objects\r\n    const queries = rawQueries.map(q => ({ ...q, ...generateEmptyQuery() }));\r\n    dispatch(setQueriesAction({ exploreId, queries }));\r\n    dispatch(runQueries(exploreId));\r\n  };\r\n}\r\n\r\n/**\r\n * Close the split view and save URL state.\r\n */\r\nexport function splitClose(): ThunkResult<void> {\r\n  return dispatch => {\r\n    dispatch(splitCloseAction());\r\n    dispatch(stateSave());\r\n  };\r\n}\r\n\r\n/**\r\n * Open the split view and copy the left state to be the right state.\r\n * The right state is automatically initialized.\r\n * The copy keeps all query modifications but wipes the query results.\r\n */\r\nexport function splitOpen(): ThunkResult<void> {\r\n  return (dispatch, getState) => {\r\n    // Clone left state to become the right state\r\n    const leftState = getState().explore.left;\r\n    const itemState = {\r\n      ...leftState,\r\n      queryTransactions: [],\r\n      queries: leftState.queries.slice(),\r\n    };\r\n    dispatch(splitOpenAction({ itemState }));\r\n    dispatch(stateSave());\r\n  };\r\n}\r\n\r\n/**\r\n * Saves Explore state to URL using the `left` and `right` parameters.\r\n * If split view is not active, `right` will not be set.\r\n */\r\nexport function stateSave() {\r\n  return (dispatch, getState) => {\r\n    const { left, right, split } = getState().explore;\r\n    const urlStates: { [index: string]: string } = {};\r\n    const leftUrlState: ExploreUrlState = {\r\n      datasource: left.datasourceInstance.name,\r\n      queries: left.queries.map(clearQueryKeys),\r\n      range: left.range,\r\n      ui: {\r\n        showingGraph: left.showingGraph,\r\n        showingLogs: left.showingLogs,\r\n        showingTable: left.showingTable,\r\n        dedupStrategy: left.dedupStrategy,\r\n      },\r\n    };\r\n    urlStates.left = serializeStateToUrlParam(leftUrlState, true);\r\n    if (split) {\r\n      const rightUrlState: ExploreUrlState = {\r\n        datasource: right.datasourceInstance.name,\r\n        queries: right.queries.map(clearQueryKeys),\r\n        range: right.range,\r\n        ui: {\r\n          showingGraph: right.showingGraph,\r\n          showingLogs: right.showingLogs,\r\n          showingTable: right.showingTable,\r\n          dedupStrategy: right.dedupStrategy,\r\n        },\r\n      };\r\n\r\n      urlStates.right = serializeStateToUrlParam(rightUrlState, true);\r\n    }\r\n\r\n    dispatch(updateLocation({ query: urlStates }));\r\n  };\r\n}\r\n\r\n/**\r\n * Creates action to collapse graph/logs/table panel. When panel is collapsed,\r\n * queries won't be run\r\n */\r\nconst togglePanelActionCreator = (\r\n  actionCreator:\r\n    | ActionCreator<ToggleGraphPayload>\r\n    | ActionCreator<ToggleLogsPayload>\r\n    | ActionCreator<ToggleTablePayload>\r\n) => (exploreId: ExploreId, isPanelVisible: boolean) => {\r\n  return dispatch => {\r\n    let uiFragmentStateUpdate: Partial<ExploreUIState>;\r\n    const shouldRunQueries = !isPanelVisible;\r\n\r\n    switch (actionCreator.type) {\r\n      case toggleGraphAction.type:\r\n        uiFragmentStateUpdate = { showingGraph: !isPanelVisible };\r\n        break;\r\n      case toggleLogsAction.type:\r\n        uiFragmentStateUpdate = { showingLogs: !isPanelVisible };\r\n        break;\r\n      case toggleTableAction.type:\r\n        uiFragmentStateUpdate = { showingTable: !isPanelVisible };\r\n        break;\r\n    }\r\n\r\n    dispatch(actionCreator({ exploreId }));\r\n    dispatch(updateExploreUIState(exploreId, uiFragmentStateUpdate));\r\n\r\n    if (shouldRunQueries) {\r\n      dispatch(runQueries(exploreId));\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * Expand/collapse the graph result viewer. When collapsed, graph queries won't be run.\r\n */\r\nexport const toggleGraph = togglePanelActionCreator(toggleGraphAction);\r\n\r\n/**\r\n * Expand/collapse the logs result viewer. When collapsed, log queries won't be run.\r\n */\r\nexport const toggleLogs = togglePanelActionCreator(toggleLogsAction);\r\n\r\n/**\r\n * Expand/collapse the table result viewer. When collapsed, table queries won't be run.\r\n */\r\nexport const toggleTable = togglePanelActionCreator(toggleTableAction);\r\n\r\n/**\r\n * Change logs deduplication strategy and update URL.\r\n */\r\nexport const changeDedupStrategy = (exploreId, dedupStrategy: LogsDedupStrategy) => {\r\n  return dispatch => {\r\n    dispatch(updateExploreUIState(exploreId, { dedupStrategy }));\r\n  };\r\n};\r\n","import { createLodashMemoizedSelector } from 'app/core/utils/reselect';\r\nimport { ExploreItemState } from 'app/types';\r\nimport { filterLogLevels, dedupLogRows } from 'app/core/logs_model';\r\n\r\nexport const exploreItemUIStateSelector = (itemState: ExploreItemState) => {\r\n  const { showingGraph, showingLogs, showingTable, showingStartPage, dedupStrategy } = itemState;\r\n  return {\r\n    showingGraph,\r\n    showingLogs,\r\n    showingTable,\r\n    showingStartPage,\r\n    dedupStrategy,\r\n  };\r\n};\r\n\r\nconst logsSelector = (state: ExploreItemState) => state.logsResult;\r\nconst hiddenLogLevelsSelector = (state: ExploreItemState) => state.hiddenLogLevels;\r\nconst dedupStrategySelector = (state: ExploreItemState) => state.dedupStrategy;\r\nexport const deduplicatedLogsSelector = createLodashMemoizedSelector(\r\n  logsSelector,\r\n  hiddenLogLevelsSelector,\r\n  dedupStrategySelector,\r\n  (logs, hiddenLogLevels, dedupStrategy) => {\r\n    if (!logs) {\r\n      return null;\r\n    }\r\n    const filteredData = filterLogLevels(logs, new Set(hiddenLogLevels));\r\n    return dedupLogRows(filteredData, dedupStrategy);\r\n  }\r\n);\r\n","/**\r\n * Performs a shallow comparison of two sets with the same item type.\r\n */\r\nexport function equal<T>(a: Set<T>, b: Set<T>): boolean {\r\n  if (a.size !== b.size) {\r\n    return false;\r\n  }\r\n  const it = a.values();\r\n  while (true) {\r\n    const { value, done } = it.next();\r\n    if (done) {\r\n      return true;\r\n    }\r\n    if (!b.has(value)) {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Returns a new set with items in both sets using shallow comparison.\r\n */\r\nexport function intersect<T>(a: Set<T>, b: Set<T>): Set<T> {\r\n  const result = new Set<T>();\r\n  const it = b.values();\r\n  while (true) {\r\n    const { value, done } = it.next();\r\n    if (done) {\r\n      return result;\r\n    }\r\n    if (a.has(value)) {\r\n      result.add(value);\r\n    }\r\n  }\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AAQA;AAAA;AAAA;;AAWA;AAVA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AAAA;;AAWA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAIA;AACA;AAKA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;AC9DA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;ACJA;AAEA;AAEA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;;AAwBA;AAjCA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;;;;;;;;;;;;;;AC7CA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAKA;;;;;;;;;;;;;;;;;;ACpBA;AAEA;AAAA;AACA;AAAA;AAEA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjCA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AACA;AA8BA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;AACA;AAAA;AAQA;AAAA;AAiCA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AA5EA;AACA;;AACA;AAEA;;;;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AASA;;;;AACA;AAEA;AACA;AACA;AAiDA;AAAA;AACA;AAcA;AAEA;AAEA;AACA;AACA;AAIA;AAEA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAeA;AAMA;AACA;AAAA;;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChSA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAQA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AA2BA;AAAA;AACA;AAAA;AAIA;;AACA;;;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;AAhBA;AAkBA;AACA;AAWA;AAEA;AACA;AACA;AAGA;AAEA;AAGA;AAEA;AAKA;AACA;AACA;AAEA;AACA;AAQA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAAA;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnMA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAuBA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AA+BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA2BA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAoDA;AA3JA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA2CA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAMA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAKA;AACA;AAGA;AACA;AAAA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;ACtQA;AACA;AACA;AAMA;AACA;AACA;AAeA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAwBA;AAtBA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAWA;AACA;AAAA;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;ACxEA;AACA;AAeA;AAAA;AAAA;AAAA;AACA;;AAkBA;AAhBA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAKA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;;AAmBA;AAjBA;AAAA;AACA;AACA;AACA;AAKA;AACA;AAOA;AA1BA;AACA;AACA;AAyBA;AAAA;AA5BA;;;;;;;;;;;;;;;;;;;;;ACrCA;AAEA;AACA;AAeA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA6BA;AA3BA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAGA;AACA;AAEA;AAWA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;ACzEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AAUA;AAAA;AAAA;;AAuCA;AAtCA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;AAAA;;AAAA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAMA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;ACzEA;AAGA;AASA;AAAA;AAAA;;AAOA;AANA;AACA;AACA;AAGA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAwBA;;;AAGA;AACA;AACA;AAEA;AACA;AAGA;AAEA;;;;;;AAMA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAmFA;AA9HA;AACA;AACA;AA2CA;AACA;AAUA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAKA;AAKA;AAEA;AAGA;AACA;AASA;AAQA;AACA;AAEA;AAYA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChMA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AA8BA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AA2JA;AA5NA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AA8CA;AAAA;AACA;AAaA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AAgBA;AAIA;AAAA;AAAA;AACA;AAMA;AACA;AACA;AACA;AAaA;AACA;AACA;AACA;AAYA;;AAAA;AAAA;AAEA;;AAGA;AAMA;AAEA;AACA;AAOA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/SA;AACA;AACA;AAIA;AAGA;AACA;AACA;AACA;AACA;AAwBA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AA8CA;AA5CA;AACA;AAkBA;AAEA;AAsBA;AACA;AAAA;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;ACjIA;AASA;AAAA;AAAA;AAAA;AACA;;AAuBA;AArBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAKA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;ACjCA;AACA;AAEA;AACA;AACA;AAKA;AAYA;AAAA;AAAA;;AAuDA;AAnDA;;;;;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7EA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAoBA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA0DA;AA3FA;AACA;AACA;AAiCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAwBA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AAMA;AACA;AAAA;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;AC3KA;AACA;AAEA;AACA;AAaA;AAAA;AAAA;;AAWA;AAVA;AACA;AACA;AAGA;AACA;AAGA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;AC5BA;AAGA;AAEA;AACA;AACA;AAMA;AAAA;AAAA;;AAaA;AAZA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAKA;AACA;AAAA;AAMA;AAAA;AAAA;;AAWA;AAVA;AACA;AACA;AAOA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AC3CA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAQA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA4BA;AA1BA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAOA;AAEA;AAYA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AC/DA;AACA;AACA;AAKA;AACA;AACA;AAYA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;AAeA;AAbA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AAAA;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;ACrDA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAqBA;;;;;;;;;AASA;AACA;AAAA;AAGA;AAAA;AAwFA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AAzJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAgEA;AACA;AACA;AAMA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAIA;AAKA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AAQA;AACA;AAQA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAAA;AAEA;AACA;AAGA;AAGA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5TA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAUA;AAAA;AAIA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAOA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpFA;AACA;AAGA;AACA;AACA;AAEA;AAYA;AACA;AAcA;AAyCA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAAA;AACA;;;;AACA;;AAAA;AACA;AACA;AAEA;;AAAA;AAEA;;;;AAGA;;AAAA;;;;AAEA;AACA;;AAGA;;;;AACA;AACA;AAEA;;;AAGA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AAEA;AAEA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AAAA;AASA;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;;;;AAEA;;AAAA;;;;AAEA;;;AAIA;AACA;;AAAA;;;AAGA;;;;AAGA;;AAAA;;;;AAEA;AACA;;AAEA;;;AAEA;;;;;AAEA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAMA;;;;;AACA;AAEA;AACA;AACA;;;AACA;AAEA;;AADA;AACA;;;AAEA;AACA;;;AAGA;AAKA;;;;AACA;AACA;AAEA;;AAEA;AACA;AAAA;AACA;;;;;AACA;AAEA;AACA;AACA;;;;AAGA;;AAAA;AACA;;;;AAEA;;;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;;;AACA;AACA;AAEA;;;;;;AAMA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;;;;;;AAUA;AACA;AAQA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAAA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAKA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AAAA;AAMA;;;;AACA;AACA;AAEA;AACA;;;;;AACA;AASA;;;;AAEA;AACA;;AAAA;AACA;AACA;AACA;AACA;;;;AAEA;AACA;;;;;AAEA;;;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;;;AAGA;AACA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC5vBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC5BA;AAAA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}